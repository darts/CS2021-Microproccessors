


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             buttonUp, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000         
    4 00000000                 EXPORT           start
    5 00000000         start
    6 00000000         
    7 00000000 E0028018 
                       IO1DIR  EQU              0xE0028018
    8 00000000 E0028014 
                       IO1SET  EQU              0xE0028014
    9 00000000 E002801C 
                       IO1CLR  EQU              0xE002801C
   10 00000000 E0028010 
                       IO1PIN  EQU              0xE0028010
   11 00000000         
   12 00000000 E59F1198        LDR              R1, =IO1DIR
   13 00000004 E3A0280F        LDR              R2, =0x000F0000 ; select P1.19 
                                                            through P1.16
   14 00000008 E5812000        STR              R2, [R1]    ; set as outputs
   15 0000000C E59F1190        LDR              R1, =IO1SET ; 
   16 00000010 E5812000        STR              R2, [R1]    ; set the bits to t
                                                            urn off the LEDs
   17 00000014 E59F218C        ldr              r2, =IO1CLR
   18 00000018 E59F318C        ldr              r3, =IO1PIN
   19 0000001C         
   20 0000001C         foreverLoop
   21 0000001C EB000014        BL               getPress
   22 00000020         
   23 00000020         ;ldr r4, [r3]
   24 00000020         ;ldr r6, = 0x00F00000
   25 00000020         ;and r4, r4, r6
   26 00000020         ;eor r4, r4, r6
   27 00000020         ;LDR R0, =IO1PIN  ; load button addr
   28 00000020         ;LDR R0, [R0]  ; load originalValue
   29 00000020         ;LDR R1, =0x00F00000 ; load mask
   30 00000020         ;AND R0, R1, R0  ; originalValue &= mask
   31 00000020         ;EOR R0, R0, R1
   32 00000020         
   33 00000020         
   34 00000020 E3500014        CMP              R0, #20
   35 00000024 1A000002        BNE              foreverLoop1
   36 00000028 E3E00007        LDR              R0, =-8
   37 0000002C EB000046        BL               flashNum
   38 00000030 EAFFFFF9        B                foreverLoop
   39 00000034         foreverLoop1
   40 00000034 E3500015        CMP              R0, #21
   41 00000038 1A000002        BNE              foreverLoop2
   42 0000003C E3A00004        LDR              R0, =4
   43 00000040 EB000041        BL               flashNum
   44 00000044 EAFFFFF4        B                foreverLoop
   45 00000048         foreverLoop2
   46 00000048 E3500016        CMP              R0, #22
   47 0000004C 1A000002        BNE              foreverLoop3
   48 00000050 E3A00002        LDR              R0, =2
   49 00000054 EB00003C        BL               flashNum
   50 00000058 EAFFFFEF        B                foreverLoop
   51 0000005C         foreverLoop3
   52 0000005C E3500017        CMP              R0, #23
   53 00000060 1AFFFFED        BNE              foreverLoop



ARM Macro Assembler    Page 2 


   54 00000064 E3A00001        LDR              R0, =1
   55 00000068 EB000037        BL               flashNum
   56 0000006C EAFFFFEA        B                foreverLoop
   57 00000070         
   58 00000070         
   59 00000070 EAFFFFFE 
                       stop    B                stop
   60 00000074         
   61 00000074         ;Returns pressed key in R0
   62 00000074         getPress
   63 00000074 E92D403E        STMFD            sp!, {R1-R5, LR}
   64 00000078         ; R0 = original values
   65 00000078         ; R1 = mask
   66 00000078         ; R2 = isLongPress
   67 00000078         ; R3 = timerDelay
   68 00000078         ; R4 = button addr
   69 00000078         ; R5 = button values
   70 00000078         
   71 00000078 E59F012C        LDR              R0, =IO1PIN ; load button addr
   72 0000007C E5900000        LDR              R0, [R0]    ; load originalValu
                                                            e
   73 00000080 E3A0160F        LDR              R1, =0x00F00000 ; load mask
   74 00000084 E0010000        AND              R0, R1, R0  ; originalValue &= 
                                                            mask
   75 00000088         
   76 00000088 E1510000        CMP              R1, R0      ; if(button values 
                                                            == mask)
   77 0000008C 1A000001        BNE              pressedGetPress ; {
   78 00000090 E3A00000        LDR              R0, =0      ;  originalValue = 
                                                            0
   79 00000094 EA000020        B                notNegGetPress ; }
   80 00000098         pressedGetPress                      ; else{
   81 00000098 E3A02001        LDR              R2, =1      ;   isLongPress = 1
                                                            
   82 0000009C E59F310C        LDR              R3, =1100000 ;   timerDelay
   83 000000A0 E59F4104        LDR              R4, =IO1PIN ;  load button addr
                                                            
   84 000000A4         
   85 000000A4         waitTimeGetPress
   86 000000A4 E2533001        SUBS             R3, R3, #1  ;  while(timerdelay
                                                            )
   87 000000A8 0A000005        BEQ              doneWaitGetPress ;  {
   88 000000AC E5945000        LDR              R5, [R4]    ;    load button va
                                                            lues()
   89 000000B0 E0055001        AND              R5, R5, R1  ;   button values &
                                                            = mask
   90 000000B4 E1550000        CMP              R5, R0      ;   if (original va
                                                            lues != button valu
                                                            es){
   91 000000B8 0AFFFFF9        BEQ              waitTimeGetPress ;    isLongPre
                                                            ss = false
   92 000000BC E3A02000        LDR              R2, =0      ;    break
   93 000000C0 EA000003        B                shortPressGetPress ;
   94 000000C4         doneWaitGetPress                     ;   }
   95 000000C4 E5945000        LDR              R5, [R4]    ;    load button va
                                                            lues()
   96 000000C8 E0055001        AND              R5, R5, R1  ;   button values &
                                                            = mask
   97 000000CC E1550000        CMP              R5, R0      ;   while(button va



ARM Macro Assembler    Page 3 


                                                            lues == originalVal
                                                            ues)
   98 000000D0 0AFFFFFB        BEQ              doneWaitGetPress ;   {wait()}
   99 000000D4         shortPressGetPress
  100 000000D4 E0200001        EOR              R0, R0, R1  ;   originalValue X
                                                            OR mask
  101 000000D8 E1A00A20        LSR              R0, #20     ;   originalValue >
                                                            > 20
  102 000000DC         
  103 000000DC E3500001        CMP              R0, #1      ;   if(originalValu
                                                            e == 1)
  104 000000E0 1A000001        BNE              chkTwoGetPress ;   {
  105 000000E4 E3A00014        LDR              R0, =20     ;    originalValue 
                                                            = 20
  106 000000E8 EA000008        B                mayNegGetPress ;   }
  107 000000EC         chkTwoGetPress                       ;
  108 000000EC E3500002        CMP              R0, #2      ;   else if(origina
                                                            lValue == 2)
  109 000000F0 1A000001        BNE              chkFourGetPress ;   {
  110 000000F4 E3A00015        LDR              R0, =21     ;    originalValue 
                                                            = 21
  111 000000F8 EA000004        B                mayNegGetPress ;   }
  112 000000FC         chkFourGetPress                      ;  
  113 000000FC E3500004        CMP              R0, #4      ;   else if(origina
                                                            lValue == 4)
  114 00000100 1A000001        BNE              chk8GetPress ;   {
  115 00000104 E3A00016        LDR              R0, =22     ;    originalValue 
                                                            = 22
  116 00000108 EA000000        B                mayNegGetPress ;   }  
  117 0000010C         chk8GetPress                         ;  else {
  118 0000010C E3A00017        LDR              R0, =23     ;    originalValue 
                                                            = 23
  119 00000110         mayNegGetPress                       ;   }
  120 00000110 E3520000        CMP              R2, #0      ;   if(isLongPress)
                                                            
  121 00000114 0A000000        BEQ              notNegGetPress ;   {
  122 00000118 E2600000        NEG              R0, R0      ;    originalValue 
                                                            = 2'sComplementOf(o
                                                            riginalValue)
  123 0000011C         notNegGetPress                       ;   }
  124 0000011C         ; }
  125 0000011C E8BD803E        LDMFD            sp!, {R1-R5, PC}
  126 00000120         
  127 00000120         ;Takes number in R0
  128 00000120         ;Num in range (-8 <= x <= 7)
  129 00000120         dispNum
  130 00000120 E92D4006        STMFD            sp!, {R1-R2, LR}
  131 00000124 E59F1078        LDR              R1, =IO1SET ; load set reg
  132 00000128 E3A0280F        LDR              R2, =0x000F0000 ; load mask
  133 0000012C E5812000        STR              R2, [R1]    ; turn off LEDs usi
                                                            ng mask
  134 00000130         
  135 00000130 E59F1070        LDR              R1, =IO1CLR ; load clear reg
  136 00000134 E2800008        ADD              R0, R0, #8  ; 
  137 00000138 E59F2074        ldr              R2, =dispArray ;
  138 0000013C E7922000        ldr              R2, [R2, R0] ;
  139 00000140 E1A02802        LSL              R2, #16     ;
  140 00000144 E5812000        STR              R2, [R1]    ;
  141 00000148 E8BD8006        LDMFD            sp!, {R1-R2, PC}



ARM Macro Assembler    Page 4 


  142 0000014C         
  143 0000014C         ;Takes a number in R0
  144 0000014C         ;Num in range (-8 <= x <= 7)
  145 0000014C         flashNum
  146 0000014C E92D401E        STMFD            sp!, {R1-R4, LR}
  147 00000150 E1A01000        MOV              R1, R0      ; numTmp = num
  148 00000154 E3A03003        LDR              R3, =3      ; number of flashes
                                                             = 3
  149 00000158 E59F4058        LDR              R4, =1000000 ; waitTime
  150 0000015C         notDoneFlashNum                      ;
  151 0000015C E3530000        CMP              R3, #0      ; while(number of f
                                                            lashes > 0)
  152 00000160 0A000009        BEQ              doneAllFlashNum ; {
  153 00000164 E2433001        SUB              R3, R3, #1  ;  number of flashe
                                                            s --
  154 00000168 E3A00000        LDR              R0, =0      ; load 0 to display
                                                            
  155 0000016C EBFFFFEB        BL               dispNum     ; show 0
  156 00000170 E1A00004        MOV              R0, R4      ; load waitTime
  157 00000174 EB000005        BL               wait        ; wait(waitTime)
  158 00000178 E1A00001        MOV              R0, R1      ; num = numTmp
  159 0000017C EBFFFFE7        BL               dispNum     ; show(num)
  160 00000180 E1A00004        MOV              R0, R4      ; load waitTime
  161 00000184 EB000001        BL               wait        ; wait(waitTime)
  162 00000188 EAFFFFF3        B                notDoneFlashNum ; }
  163 0000018C         doneAllFlashNum
  164 0000018C E8BD801E        LDMFD            sp!, {R1-R4, PC}
  165 00000190         
  166 00000190         ; wait an amount of cycles 
  167 00000190         ; R0 = cycles
  168 00000190         wait
  169 00000190 E92D4000        STMFD            sp!, {LR}
  170 00000194         loopWait                             ; while(cycles-- > 
                                                            0)
  171 00000194 E2500001        SUBS             R0, R0, #1  ; {
  172 00000198 1AFFFFFD        BNE              loopWait    ; }
  173 0000019C E8BD8000        LDMFD            sp!, {PC}
  174 000001A0         
  175 000001A0 E0028018 
              E0028014 
              E002801C 
              E0028010 
              0010C8E0 
              00000000 
              000F4240         AREA             TestData, DATA, READWRITE
  176 00000000         
  177 00000000         dispArray
  178 00000000 01              DCB              2_0001
  179 00000001 09              DCB              2_1001
  180 00000002 05              DCB              2_0101
  181 00000003 0D              DCB              2_1101
  182 00000004 03              DCB              2_0011
  183 00000005 0B              DCB              2_1011
  184 00000006 07              DCB              2_0111
  185 00000007 0F              DCB              2_1111
  186 00000008 00              DCB              2_0000
  187 00000009 08              DCB              2_1000
  188 0000000A 04              DCB              2_0100
  189 0000000B 0C              DCB              2_1100



ARM Macro Assembler    Page 5 


  190 0000000C 02              DCB              2_0010
  191 0000000D 0A              DCB              2_1010
  192 0000000E 06              DCB              2_0110
  193 0000000F 0E              DCB              2_1110
  194 00000010         
  195 00000010                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\a
pp.d -o.\app.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Ke
il_v5\ARM\Inc\Philips --predefine="__MICROLIB SETA 1" --predefine="__UVISION_VE
RSION SETA 516" --list=.\listings\app.lst App.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

buttonUp 00000000

Symbol: buttonUp
   Definitions
      At line 1 in file App.s
   Uses
      None
Comment: buttonUp unused
chk8GetPress 0000010C

Symbol: chk8GetPress
   Definitions
      At line 117 in file App.s
   Uses
      At line 114 in file App.s
Comment: chk8GetPress used once
chkFourGetPress 000000FC

Symbol: chkFourGetPress
   Definitions
      At line 112 in file App.s
   Uses
      At line 109 in file App.s
Comment: chkFourGetPress used once
chkTwoGetPress 000000EC

Symbol: chkTwoGetPress
   Definitions
      At line 107 in file App.s
   Uses
      At line 104 in file App.s
Comment: chkTwoGetPress used once
dispNum 00000120

Symbol: dispNum
   Definitions
      At line 129 in file App.s
   Uses
      At line 155 in file App.s
      At line 159 in file App.s

doneAllFlashNum 0000018C

Symbol: doneAllFlashNum
   Definitions
      At line 163 in file App.s
   Uses
      At line 152 in file App.s
Comment: doneAllFlashNum used once
doneWaitGetPress 000000C4

Symbol: doneWaitGetPress
   Definitions
      At line 94 in file App.s
   Uses
      At line 87 in file App.s
      At line 98 in file App.s

flashNum 0000014C



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: flashNum
   Definitions
      At line 145 in file App.s
   Uses
      At line 37 in file App.s
      At line 43 in file App.s
      At line 49 in file App.s
      At line 55 in file App.s

foreverLoop 0000001C

Symbol: foreverLoop
   Definitions
      At line 20 in file App.s
   Uses
      At line 38 in file App.s
      At line 44 in file App.s
      At line 50 in file App.s
      At line 53 in file App.s
      At line 56 in file App.s

foreverLoop1 00000034

Symbol: foreverLoop1
   Definitions
      At line 39 in file App.s
   Uses
      At line 35 in file App.s
Comment: foreverLoop1 used once
foreverLoop2 00000048

Symbol: foreverLoop2
   Definitions
      At line 45 in file App.s
   Uses
      At line 41 in file App.s
Comment: foreverLoop2 used once
foreverLoop3 0000005C

Symbol: foreverLoop3
   Definitions
      At line 51 in file App.s
   Uses
      At line 47 in file App.s
Comment: foreverLoop3 used once
getPress 00000074

Symbol: getPress
   Definitions
      At line 62 in file App.s
   Uses
      At line 21 in file App.s
Comment: getPress used once
loopWait 00000194

Symbol: loopWait
   Definitions
      At line 170 in file App.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 172 in file App.s
Comment: loopWait used once
mayNegGetPress 00000110

Symbol: mayNegGetPress
   Definitions
      At line 119 in file App.s
   Uses
      At line 106 in file App.s
      At line 111 in file App.s
      At line 116 in file App.s

notDoneFlashNum 0000015C

Symbol: notDoneFlashNum
   Definitions
      At line 150 in file App.s
   Uses
      At line 162 in file App.s
Comment: notDoneFlashNum used once
notNegGetPress 0000011C

Symbol: notNegGetPress
   Definitions
      At line 123 in file App.s
   Uses
      At line 79 in file App.s
      At line 121 in file App.s

pressedGetPress 00000098

Symbol: pressedGetPress
   Definitions
      At line 80 in file App.s
   Uses
      At line 77 in file App.s
Comment: pressedGetPress used once
shortPressGetPress 000000D4

Symbol: shortPressGetPress
   Definitions
      At line 99 in file App.s
   Uses
      At line 93 in file App.s
Comment: shortPressGetPress used once
start 00000000

Symbol: start
   Definitions
      At line 5 in file App.s
   Uses
      At line 4 in file App.s
Comment: start used once
stop 00000070

Symbol: stop
   Definitions
      At line 59 in file App.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 59 in file App.s
Comment: stop used once
wait 00000190

Symbol: wait
   Definitions
      At line 168 in file App.s
   Uses
      At line 157 in file App.s
      At line 161 in file App.s

waitTimeGetPress 000000A4

Symbol: waitTimeGetPress
   Definitions
      At line 85 in file App.s
   Uses
      At line 91 in file App.s
Comment: waitTimeGetPress used once
23 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

TestData 00000000

Symbol: TestData
   Definitions
      At line 175 in file App.s
   Uses
      None
Comment: TestData unused
dispArray 00000000

Symbol: dispArray
   Definitions
      At line 177 in file App.s
   Uses
      At line 137 in file App.s
Comment: dispArray used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

IO1CLR E002801C

Symbol: IO1CLR
   Definitions
      At line 9 in file App.s
   Uses
      At line 17 in file App.s
      At line 135 in file App.s

IO1DIR E0028018

Symbol: IO1DIR
   Definitions
      At line 7 in file App.s
   Uses
      At line 12 in file App.s
Comment: IO1DIR used once
IO1PIN E0028010

Symbol: IO1PIN
   Definitions
      At line 10 in file App.s
   Uses
      At line 18 in file App.s
      At line 71 in file App.s
      At line 83 in file App.s

IO1SET E0028014

Symbol: IO1SET
   Definitions
      At line 8 in file App.s
   Uses
      At line 15 in file App.s
      At line 131 in file App.s

4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 2 in file App.s
   Uses
      None
Comment: main unused
1 symbol
364 symbols in table
