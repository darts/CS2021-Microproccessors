


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             buttonUp, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000         
    4 00000000                 EXPORT           start
    5 00000000         start
    6 00000000         
    7 00000000 E0028018 
                       IO1DIR  EQU              0xE0028018
    8 00000000 E0028014 
                       IO1SET  EQU              0xE0028014
    9 00000000 E002801C 
                       IO1CLR  EQU              0xE002801C
   10 00000000 E0028010 
                       IO1PIN  EQU              0xE0028010
   11 00000000         
   12 00000000         
   13 00000000 E59F12D8        LDR              R1, =IO1DIR
   14 00000004 E3A0280F        LDR              R2, =0x000F0000 ; select P1.19 
                                                            through P1.16
   15 00000008 E5812000        STR              R2, [R1]    ; set as outputs
   16 0000000C E59F12D0        LDR              R1, =IO1SET ; 
   17 00000010 E5812000        STR              R2, [R1]    ; set the bits to t
                                                            urn off the LEDs
   18 00000014 E59F22CC        LDR              R2, =IO1CLR
   19 00000018 E59F32CC        LDR              R3, =IO1PIN
   20 0000001C         
   21 0000001C         
   22 0000001C E3A06000        LDR              R6, =0
   23 00000020         foreverLoop
   24 00000020 EB00005F        BL               getPress
   25 00000024         
   26 00000024 E3500000        CMP              R0, #0
   27 00000028 0AFFFFFC        BEQ              foreverLoop
   28 0000002C         ; R0 = button
   29 0000002C         ; R6 = num1
   30 0000002C         ; R7 = num2
   31 0000002C         ; R8 = first boolean
   32 0000002C         ; R9 = operand
   33 0000002C         
   34 0000002C         increment                            ;     
   35 0000002C E3500014        CMP              R0, #20     ; if(button == incr
                                                            ease)
   36 00000030 1A000006        BNE              decrement   ; {
   37 00000034 E3560007        CMP              R6,#7       ; if(num1 >= 7){
   38 00000038 BA000002        BLT              plusOne     ; 
   39 0000003C E1A00006        MOV              R0, R6      ;  button = num1
   40 00000040 EB000091        BL               flashNum    ;  flashNum(button)
                                                            
   41 00000044 EAFFFFF5        B                foreverLoop ;  B to start
   42 00000048         plusOne                              ; }else{
   43 00000048 E2866001        ADD              R6,R6,#1    ;   num1++ }
   44 0000004C EA00003C        B                finish      ; }
   45 00000050         decrement                            ;
   46 00000050 E3500015        CMP              R0,#21      ; elif(button == de
                                                            crease)
   47 00000054 1A000006        BNE              adder       ;{*******
   48 00000058 E3760008        CMP              R6,#-8      ;  if(num1<= -8){
   49 0000005C CA000002        BGT              minusOne    ; 
   50 00000060 E1A00006        MOV              R0, R6      ;  button = num1



ARM Macro Assembler    Page 2 


   51 00000064 EB000088        BL               flashNum    ;  flashNum(button)
                                                            
   52 00000068 EAFFFFEC        B                foreverLoop ;  B to start
   53 0000006C         minusOne                             ; }else{ 
   54 0000006C E2466001        SUB              R6,R6,#1    ;  num--
   55 00000070 EA000033        B                finish      ;}
   56 00000074         adder
   57 00000074         ; CMP R0, #22
   58 00000074         ; BNE subber
   59 00000074         ; CMP R8, #0
   60 00000074         ; BNE adder2
   61 00000074         ; MOV R7, R6
   62 00000074         ; LDR R6, =0
   63 00000074         ; LDR R8, =0
   64 00000074         
   65 00000074         ; B finish
   66 00000074         ;adder2
   67 00000074         ; ADD R7, R7, 
   68 00000074         
   69 00000074         
   70 00000074 E3500016        CMP              R0,#22      ;elif(button == add
                                                            )
   71 00000078 1A000011        BNE              subber      ;{*****************
                                                            *******************
                                                            *******************
                                                            *******************
                                                            *******************
                                                            **
   72 0000007C E3580000        CMP              R8, #0      ; if(first == true)
                                                            
   73 00000080 1A000003        BNE              adder2      ;  {
   74 00000084 E1A07006        MOV              R7,R6       ;   num2 = num1
   75 00000088 E3A06000        MOV              R6,#0       ;   num1 =0
   76 0000008C         ;//clear display code goes here ; display
   77 0000008C E3A08001        MOV              R8, #1      ;   first = false; 
                                                            
   78 00000090 EA000009        B                endAdd      ; }
   79 00000094         adder2                               ; else {
   80 00000094 E3590000        CMP              R9,#0       ;  if(operand == 0)
                                                            
   81 00000098 1A000002        BNE              insub       ;  {
   82 0000009C E0867007        ADD              R7,R6,R7    ;  num2 = num1 + nu
                                                            m2 
   83 000000A0 E3A06000        MOV              R6,#0       ;   num1 = 0
   84 000000A4         ;//displaythis  ;    display result
   85 000000A4 EA000004        B                endAdd      ;  }
   86 000000A8         insub
   87 000000A8 E3590001        CMP              R9,#1       ;  elif(operand == 
                                                            1)
   88 000000AC 1A000004        BNE              subber      ;  {
   89 000000B0 E0477006        SUB              R7,R7,R6    ;   num2 = num2-num
                                                            1
   90 000000B4 E3A06000        MOV              R6,#0       ;   num1 = 0;
   91 000000B8         ;//display   ;   displayResult;
   92 000000B8 EAFFFFFF        B                endAdd      ;  }
   93 000000BC         endAdd
   94 000000BC E3A09000        MOV              R9,#0       ;  operand = 0;
   95 000000C0 EA00001F        B                finish      ;}
   96 000000C4         subber



ARM Macro Assembler    Page 3 


   97 000000C4 E3500017        CMP              R0,#23      ;elif(button == sub
                                                            )
   98 000000C8 1A000011        BNE              longPressAdd ;{
   99 000000CC E3580000        CMP              R8, #0      ; if(first == true)
                                                            
  100 000000D0 1A000003        BNE              subber2     ;  {
  101 000000D4 E1A07006        MOV              R7,R6       ;   num2 = num1
  102 000000D8 E3A06000        MOV              R6,#0       ;   num1 =0
  103 000000DC         ;//clear display code goes here ; display
  104 000000DC E3A08001        MOV              R8, #1      ;   first = false; 
                                                            
  105 000000E0 EA000009        B                endsub      ; }
  106 000000E4         subber2                              ; else {
  107 000000E4 E3590000        CMP              R9,#0       ;  if(operand == 0)
                                                            
  108 000000E8 1A000002        BNE              insub1      ;  {
  109 000000EC E0867007        ADD              R7,R6,R7    ;  num2 = num1 + nu
                                                            m2 
  110 000000F0 E3A06000        MOV              R6,#0       ;   num1 = 0
  111 000000F4         ;//displaythis  ;    display result
  112 000000F4 EA000004        B                endsub      ;  }
  113 000000F8         insub1
  114 000000F8 E3590001        CMP              R9,#1       ;  elif(operand == 
                                                            1)
  115 000000FC 1AFFFFF0        BNE              subber      ;  {
  116 00000100 E0477006        SUB              R7,R7,R6    ;   num2 = num2-num
                                                            1
  117 00000104 E3A06000        MOV              R6,#0       ;   num1 = 0;
  118 00000108         ;//display   ;   displayResult;
  119 00000108 EAFFFFFF        B                endsub      ;  }
  120 0000010C         endsub
  121 0000010C E3A09001        MOV              R9,#1       ;  operand = 1;
  122 00000110 EA00000B        B                finish      ;}
  123 00000114         longPressAdd
  124 00000114 E3700016        CMP              R0,#-22
  125 00000118 1A000002        BNE              longPressSub
  126 0000011C E3A09003        MOV              R9,#3
  127 00000120 E3A06000        MOV              R6,#0
  128 00000124 EA000006        B                finish
  129 00000128         longPressSub
  130 00000128 E3700017        CMP              R0,#-23
  131 0000012C 1A000004        BNE              finish
  132 00000130 E3A06000        MOV              R6,#0
  133 00000134 E3A07000        MOV              R7,#0
  134 00000138 E3A08000        MOV              R8,#0
  135 0000013C E3A09000        MOV              R9,#0
  136 00000140 EAFFFFFF        B                finish
  137 00000144         finish
  138 00000144 E1A00006        MOV              R0, R6
  139 00000148 EB000044        BL               dispNum
  140 0000014C EAFFFFB3        B                foreverLoop
  141 00000150         ;ldr r4, [r3]
  142 00000150         ;ldr r6, = 0x00F00000
  143 00000150         ;and r4, r4, r6
  144 00000150         ;eor r4, r4, r6
  145 00000150         ;LDR R0, =IO1PIN  ; load button addr
  146 00000150         ;LDR R0, [R0]  ; load originalValue
  147 00000150         ;LDR R1, =0x00F00000 ; load mask
  148 00000150         ;AND R0, R1, R0  ; originalValue &= mask



ARM Macro Assembler    Page 4 


  149 00000150         ;EOR R0, R0, R1
  150 00000150         
  151 00000150         over
  152 00000150 E3500014        CMP              R0, #20
  153 00000154 1A000002        BNE              foreverLoop1
  154 00000158 E3E00007        LDR              R0, =-8
  155 0000015C EB00004A        BL               flashNum
  156 00000160 EAFFFFAE        B                foreverLoop
  157 00000164         foreverLoop1
  158 00000164 E3500015        CMP              R0, #21
  159 00000168 1A000002        BNE              foreverLoop2
  160 0000016C E3A00004        LDR              R0, =4
  161 00000170 EB000045        BL               flashNum
  162 00000174 EAFFFFA9        B                foreverLoop
  163 00000178         foreverLoop2
  164 00000178 E3500016        CMP              R0, #22
  165 0000017C 1A000002        BNE              foreverLoop3
  166 00000180 E3A00002        LDR              R0, =2
  167 00000184 EB000040        BL               flashNum
  168 00000188 EAFFFFA4        B                foreverLoop
  169 0000018C         foreverLoop3
  170 0000018C E3500017        CMP              R0, #23
  171 00000190 1AFFFFA2        BNE              foreverLoop
  172 00000194 E3A00001        LDR              R0, =1
  173 00000198 EB00003B        BL               flashNum
  174 0000019C EAFFFF9F        B                foreverLoop
  175 000001A0         
  176 000001A0         
  177 000001A0 EAFFFFFE 
                       stop    B                stop
  178 000001A4         
  179 000001A4         ;Returns pressed key in R0
  180 000001A4         getPress
  181 000001A4 E92D403E        STMFD            sp!, {R1-R5, LR}
  182 000001A8         ; R0 = original values
  183 000001A8         ; R1 = mask
  184 000001A8         ; R2 = isLongPress
  185 000001A8         ; R3 = timerDelay
  186 000001A8         ; R4 = button addr
  187 000001A8         ; R5 = button values
  188 000001A8         
  189 000001A8 E59F013C        LDR              R0, =IO1PIN ; load button addr
  190 000001AC E5900000        LDR              R0, [R0]    ; load originalValu
                                                            e
  191 000001B0 E3A0160F        LDR              R1, =0x00F00000 ; load mask
  192 000001B4 E0010000        AND              R0, R1, R0  ; originalValue &= 
                                                            mask
  193 000001B8         
  194 000001B8 E1510000        CMP              R1, R0      ; if(button values 
                                                            == mask)
  195 000001BC 1A000001        BNE              pressedGetPress ; {
  196 000001C0 E3A00000        LDR              R0, =0      ;  originalValue = 
                                                            0
  197 000001C4 EA000024        B                nonePressed ; }
  198 000001C8         pressedGetPress                      ; else{
  199 000001C8 E3A02001        LDR              R2, =1      ;   isLongPress = 1
                                                            
  200 000001CC E59F311C        LDR              R3, =1100000 ;   timerDelay
  201 000001D0 E59F4114        LDR              R4, =IO1PIN ;  load button addr



ARM Macro Assembler    Page 5 


                                                            
  202 000001D4         
  203 000001D4         waitTimeGetPress
  204 000001D4 E2533001        SUBS             R3, R3, #1  ;  while(timerdelay
                                                            )
  205 000001D8 0A000005        BEQ              doneWaitGetPress ;  {
  206 000001DC E5945000        LDR              R5, [R4]    ;    load button va
                                                            lues()
  207 000001E0 E0055001        AND              R5, R5, R1  ;   button values &
                                                            = mask
  208 000001E4 E1550000        CMP              R5, R0      ;   if (original va
                                                            lues != button valu
                                                            es){
  209 000001E8 0AFFFFF9        BEQ              waitTimeGetPress ;    isLongPre
                                                            ss = false
  210 000001EC E3A02000        LDR              R2, =0      ;    break
  211 000001F0 EA000003        B                shortPressGetPress ;
  212 000001F4         doneWaitGetPress                     ;   }
  213 000001F4 E5945000        LDR              R5, [R4]    ;    load button va
                                                            lues()
  214 000001F8 E0055001        AND              R5, R5, R1  ;   button values &
                                                            = mask
  215 000001FC E1550000        CMP              R5, R0      ;   while(button va
                                                            lues == originalVal
                                                            ues)
  216 00000200 0AFFFFFB        BEQ              doneWaitGetPress ;   {wait()}
  217 00000204         shortPressGetPress
  218 00000204 E0200001        EOR              R0, R0, R1  ;   originalValue X
                                                            OR mask
  219 00000208 E1A00A20        LSR              R0, #20     ;   originalValue >
                                                            > 20
  220 0000020C         
  221 0000020C E3500001        CMP              R0, #1      ;   if(originalValu
                                                            e == 1)
  222 00000210 1A000001        BNE              chkTwoGetPress ;   {
  223 00000214 E3A00014        LDR              R0, =20     ;    originalValue 
                                                            = 20
  224 00000218 EA000008        B                mayNegGetPress ;   }
  225 0000021C         chkTwoGetPress                       ;
  226 0000021C E3500002        CMP              R0, #2      ;   else if(origina
                                                            lValue == 2)
  227 00000220 1A000001        BNE              chkFourGetPress ;   {
  228 00000224 E3A00015        LDR              R0, =21     ;    originalValue 
                                                            = 21
  229 00000228 EA000004        B                mayNegGetPress ;   }
  230 0000022C         chkFourGetPress                      ;  
  231 0000022C E3500004        CMP              R0, #4      ;   else if(origina
                                                            lValue == 4)
  232 00000230 1A000001        BNE              chk8GetPress ;   {
  233 00000234 E3A00016        LDR              R0, =22     ;    originalValue 
                                                            = 22
  234 00000238 EA000000        B                mayNegGetPress ;   }  
  235 0000023C         chk8GetPress                         ;  else {
  236 0000023C E3A00017        LDR              R0, =23     ;    originalValue 
                                                            = 23
  237 00000240         mayNegGetPress                       ;   }
  238 00000240 E3520000        CMP              R2, #0      ;   if(isLongPress)
                                                            
  239 00000244 0A000000        BEQ              notNegGetPress ;   {



ARM Macro Assembler    Page 6 


  240 00000248 E2600000        NEG              R0, R0      ;    originalValue 
                                                            = 2'sComplementOf(o
                                                            riginalValue)
  241 0000024C         notNegGetPress                       ;   }
  242 0000024C         ;  //COMPENSATE FOR SWITCH BOUNCE
  243 0000024C E1A01000        MOV              R1, R0      ;   resTmp = origin
                                                            alValue
  244 00000250 E59F009C        LDR              R0, =200000 ;   waitTime
  245 00000254 EB00001D        BL               wait        ;   wait(waitTime)
  246 00000258 E1A00001        MOV              R0, R1      ;   originalValue =
                                                             resTmp
  247 0000025C         nonePressed                          ; }
  248 0000025C E8BD803E        LDMFD            sp!, {R1-R5, PC}
  249 00000260         
  250 00000260         ;Takes number in R0
  251 00000260         ;Num in range (-8 <= x <= 7)
  252 00000260         dispNum
  253 00000260 E92D4006        STMFD            sp!, {R1-R2, LR}
  254 00000264 E59F1078        LDR              R1, =IO1SET ; load set reg
  255 00000268 E3A0280F        LDR              R2, =0x000F0000 ; load mask
  256 0000026C E5812000        STR              R2, [R1]    ; turn off LEDs usi
                                                            ng mask
  257 00000270         
  258 00000270 E59F1070        LDR              R1, =IO1CLR ; load clear reg
  259 00000274 E2800008        ADD              R0, R0, #8  ; num += arrayOffse
                                                            t
  260 00000278 E59F2078        LDR              R2, =dispArray ; load array add
                                                            ress
  261 0000027C E7922000        LDR              R2, [R2, R0] ; load value to di
                                                            splay from array
  262 00000280 E1A02802        LSL              R2, #16     ; Shift to compensa
                                                            te for location off
                                                            set
  263 00000284 E5812000        STR              R2, [R1]    ; Set bits to turn 
                                                            on LEDs
  264 00000288 E8BD8006        LDMFD            sp!, {R1-R2, PC}
  265 0000028C         
  266 0000028C         ;Takes a number in R0
  267 0000028C         ;Num in range (-8 <= x <= 7)
  268 0000028C         flashNum
  269 0000028C E92D401E        STMFD            sp!, {R1-R4, LR}
  270 00000290 E1A01000        MOV              R1, R0      ; numTmp = num
  271 00000294 E3A03003        LDR              R3, =3      ; number of flashes
                                                             = 3
  272 00000298 E59F405C        LDR              R4, =1000000 ; waitTime
  273 0000029C         notDoneFlashNum                      ;
  274 0000029C E3530000        CMP              R3, #0      ; while(number of f
                                                            lashes > 0)
  275 000002A0 0A000009        BEQ              doneAllFlashNum ; {
  276 000002A4 E2433001        SUB              R3, R3, #1  ;  number of flashe
                                                            s --
  277 000002A8 E3A00000        LDR              R0, =0      ; load 0 to display
                                                            
  278 000002AC EBFFFFEB        BL               dispNum     ; show 0
  279 000002B0 E1A00004        MOV              R0, R4      ; load waitTime
  280 000002B4 EB000005        BL               wait        ; wait(waitTime)
  281 000002B8 E1A00001        MOV              R0, R1      ; num = numTmp
  282 000002BC EBFFFFE7        BL               dispNum     ; show(num)
  283 000002C0 E1A00004        MOV              R0, R4      ; load waitTime



ARM Macro Assembler    Page 7 


  284 000002C4 EB000001        BL               wait        ; wait(waitTime)
  285 000002C8 EAFFFFF3        B                notDoneFlashNum ; }
  286 000002CC         doneAllFlashNum
  287 000002CC E8BD801E        LDMFD            sp!, {R1-R4, PC}
  288 000002D0         
  289 000002D0         ; wait an amount of cycles 
  290 000002D0         ; R0 = cycles
  291 000002D0         wait
  292 000002D0 E92D4000        STMFD            sp!, {LR}
  293 000002D4         loopWait                             ; while(cycles-- > 
                                                            0)
  294 000002D4 E2500001        SUBS             R0, R0, #1  ; {
  295 000002D8 1AFFFFFD        BNE              loopWait    ; }
  296 000002DC E8BD8000        LDMFD            sp!, {PC}
  297 000002E0         
  298 000002E0 E0028018 
              E0028014 
              E002801C 
              E0028010 
              0010C8E0 
              00030D40 
              00000000 
              000F4240         AREA             TestData, DATA, READWRITE
  299 00000000         
  300 00000000         dispArray
  301 00000000 01              DCB              2_0001
  302 00000001 09              DCB              2_1001
  303 00000002 05              DCB              2_0101
  304 00000003 0D              DCB              2_1101
  305 00000004 03              DCB              2_0011
  306 00000005 0B              DCB              2_1011
  307 00000006 07              DCB              2_0111
  308 00000007 0F              DCB              2_1111
  309 00000008 00              DCB              2_0000
  310 00000009 08              DCB              2_1000
  311 0000000A 04              DCB              2_0100
  312 0000000B 0C              DCB              2_1100
  313 0000000C 02              DCB              2_0010
  314 0000000D 0A              DCB              2_1010
  315 0000000E 06              DCB              2_0110
  316 0000000F 0E              DCB              2_1110
  317 00000010         
  318 00000010                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\a
pp.d -o.\app.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Ke
il_v5\ARM\Inc\Philips --predefine="__MICROLIB SETA 1" --predefine="__UVISION_VE
RSION SETA 516" --list=.\listings\app.lst App.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

adder 00000074

Symbol: adder
   Definitions
      At line 56 in file App.s
   Uses
      At line 47 in file App.s
Comment: adder used once
adder2 00000094

Symbol: adder2
   Definitions
      At line 79 in file App.s
   Uses
      At line 73 in file App.s
Comment: adder2 used once
buttonUp 00000000

Symbol: buttonUp
   Definitions
      At line 1 in file App.s
   Uses
      None
Comment: buttonUp unused
chk8GetPress 0000023C

Symbol: chk8GetPress
   Definitions
      At line 235 in file App.s
   Uses
      At line 232 in file App.s
Comment: chk8GetPress used once
chkFourGetPress 0000022C

Symbol: chkFourGetPress
   Definitions
      At line 230 in file App.s
   Uses
      At line 227 in file App.s
Comment: chkFourGetPress used once
chkTwoGetPress 0000021C

Symbol: chkTwoGetPress
   Definitions
      At line 225 in file App.s
   Uses
      At line 222 in file App.s
Comment: chkTwoGetPress used once
decrement 00000050

Symbol: decrement
   Definitions
      At line 45 in file App.s
   Uses
      At line 36 in file App.s
Comment: decrement used once
dispNum 00000260

Symbol: dispNum



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 252 in file App.s
   Uses
      At line 139 in file App.s
      At line 278 in file App.s
      At line 282 in file App.s

doneAllFlashNum 000002CC

Symbol: doneAllFlashNum
   Definitions
      At line 286 in file App.s
   Uses
      At line 275 in file App.s
Comment: doneAllFlashNum used once
doneWaitGetPress 000001F4

Symbol: doneWaitGetPress
   Definitions
      At line 212 in file App.s
   Uses
      At line 205 in file App.s
      At line 216 in file App.s

endAdd 000000BC

Symbol: endAdd
   Definitions
      At line 93 in file App.s
   Uses
      At line 78 in file App.s
      At line 85 in file App.s
      At line 92 in file App.s

endsub 0000010C

Symbol: endsub
   Definitions
      At line 120 in file App.s
   Uses
      At line 105 in file App.s
      At line 112 in file App.s
      At line 119 in file App.s

finish 00000144

Symbol: finish
   Definitions
      At line 137 in file App.s
   Uses
      At line 44 in file App.s
      At line 55 in file App.s
      At line 95 in file App.s
      At line 122 in file App.s
      At line 128 in file App.s
      At line 131 in file App.s
      At line 136 in file App.s

flashNum 0000028C



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols


Symbol: flashNum
   Definitions
      At line 268 in file App.s
   Uses
      At line 40 in file App.s
      At line 51 in file App.s
      At line 155 in file App.s
      At line 161 in file App.s
      At line 167 in file App.s
      At line 173 in file App.s

foreverLoop 00000020

Symbol: foreverLoop
   Definitions
      At line 23 in file App.s
   Uses
      At line 27 in file App.s
      At line 41 in file App.s
      At line 52 in file App.s
      At line 140 in file App.s
      At line 156 in file App.s
      At line 162 in file App.s
      At line 168 in file App.s
      At line 171 in file App.s
      At line 174 in file App.s

foreverLoop1 00000164

Symbol: foreverLoop1
   Definitions
      At line 157 in file App.s
   Uses
      At line 153 in file App.s
Comment: foreverLoop1 used once
foreverLoop2 00000178

Symbol: foreverLoop2
   Definitions
      At line 163 in file App.s
   Uses
      At line 159 in file App.s
Comment: foreverLoop2 used once
foreverLoop3 0000018C

Symbol: foreverLoop3
   Definitions
      At line 169 in file App.s
   Uses
      At line 165 in file App.s
Comment: foreverLoop3 used once
getPress 000001A4

Symbol: getPress
   Definitions
      At line 180 in file App.s
   Uses
      At line 24 in file App.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

Comment: getPress used once
increment 0000002C

Symbol: increment
   Definitions
      At line 34 in file App.s
   Uses
      None
Comment: increment unused
insub 000000A8

Symbol: insub
   Definitions
      At line 86 in file App.s
   Uses
      At line 81 in file App.s
Comment: insub used once
insub1 000000F8

Symbol: insub1
   Definitions
      At line 113 in file App.s
   Uses
      At line 108 in file App.s
Comment: insub1 used once
longPressAdd 00000114

Symbol: longPressAdd
   Definitions
      At line 123 in file App.s
   Uses
      At line 98 in file App.s
Comment: longPressAdd used once
longPressSub 00000128

Symbol: longPressSub
   Definitions
      At line 129 in file App.s
   Uses
      At line 125 in file App.s
Comment: longPressSub used once
loopWait 000002D4

Symbol: loopWait
   Definitions
      At line 293 in file App.s
   Uses
      At line 295 in file App.s
Comment: loopWait used once
mayNegGetPress 00000240

Symbol: mayNegGetPress
   Definitions
      At line 237 in file App.s
   Uses
      At line 224 in file App.s
      At line 229 in file App.s
      At line 234 in file App.s




ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

minusOne 0000006C

Symbol: minusOne
   Definitions
      At line 53 in file App.s
   Uses
      At line 49 in file App.s
Comment: minusOne used once
nonePressed 0000025C

Symbol: nonePressed
   Definitions
      At line 247 in file App.s
   Uses
      At line 197 in file App.s
Comment: nonePressed used once
notDoneFlashNum 0000029C

Symbol: notDoneFlashNum
   Definitions
      At line 273 in file App.s
   Uses
      At line 285 in file App.s
Comment: notDoneFlashNum used once
notNegGetPress 0000024C

Symbol: notNegGetPress
   Definitions
      At line 241 in file App.s
   Uses
      At line 239 in file App.s
Comment: notNegGetPress used once
over 00000150

Symbol: over
   Definitions
      At line 151 in file App.s
   Uses
      None
Comment: over unused
plusOne 00000048

Symbol: plusOne
   Definitions
      At line 42 in file App.s
   Uses
      At line 38 in file App.s
Comment: plusOne used once
pressedGetPress 000001C8

Symbol: pressedGetPress
   Definitions
      At line 198 in file App.s
   Uses
      At line 195 in file App.s
Comment: pressedGetPress used once
shortPressGetPress 00000204

Symbol: shortPressGetPress



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 217 in file App.s
   Uses
      At line 211 in file App.s
Comment: shortPressGetPress used once
start 00000000

Symbol: start
   Definitions
      At line 5 in file App.s
   Uses
      At line 4 in file App.s
Comment: start used once
stop 000001A0

Symbol: stop
   Definitions
      At line 177 in file App.s
   Uses
      At line 177 in file App.s
Comment: stop used once
subber 000000C4

Symbol: subber
   Definitions
      At line 96 in file App.s
   Uses
      At line 71 in file App.s
      At line 88 in file App.s
      At line 115 in file App.s

subber2 000000E4

Symbol: subber2
   Definitions
      At line 106 in file App.s
   Uses
      At line 100 in file App.s
Comment: subber2 used once
wait 000002D0

Symbol: wait
   Definitions
      At line 291 in file App.s
   Uses
      At line 245 in file App.s
      At line 280 in file App.s
      At line 284 in file App.s

waitTimeGetPress 000001D4

Symbol: waitTimeGetPress
   Definitions
      At line 203 in file App.s
   Uses
      At line 209 in file App.s
Comment: waitTimeGetPress used once
40 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

TestData 00000000

Symbol: TestData
   Definitions
      At line 298 in file App.s
   Uses
      None
Comment: TestData unused
dispArray 00000000

Symbol: dispArray
   Definitions
      At line 300 in file App.s
   Uses
      At line 260 in file App.s
Comment: dispArray used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

IO1CLR E002801C

Symbol: IO1CLR
   Definitions
      At line 9 in file App.s
   Uses
      At line 18 in file App.s
      At line 258 in file App.s

IO1DIR E0028018

Symbol: IO1DIR
   Definitions
      At line 7 in file App.s
   Uses
      At line 13 in file App.s
Comment: IO1DIR used once
IO1PIN E0028010

Symbol: IO1PIN
   Definitions
      At line 10 in file App.s
   Uses
      At line 19 in file App.s
      At line 189 in file App.s
      At line 201 in file App.s

IO1SET E0028014

Symbol: IO1SET
   Definitions
      At line 8 in file App.s
   Uses
      At line 16 in file App.s
      At line 254 in file App.s

4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 2 in file App.s
   Uses
      None
Comment: main unused
1 symbol
381 symbols in table
