


ARM Macro Assembler    Page 1 


    1 00000000         ; Definitions  -- references to 'UM' are to the User Man
                       ual.
    2 00000000         
    3 00000000         ; Timer Stuff -- UM, Table 173
    4 00000000         
    5 00000000 E0004000 
                       T0      equ              0xE0004000  ; Timer 0 Base Addr
                                                            ess
    6 00000000 E0008000 
                       T1      equ              0xE0008000
    7 00000000         
    8 00000000 00000000 
                       IR      equ              0           ; Add this to a tim
                                                            er's base address t
                                                            o get actual regist
                                                            er address
    9 00000000 00000004 
                       TCR     equ              4
   10 00000000 00000014 
                       MCR     equ              0x14
   11 00000000 00000018 
                       MR0     equ              0x18
   12 00000000         
   13 00000000 00000002 
                       TimerCommandReset
                               equ              2
   14 00000000 00000001 
                       TimerCommandRun
                               equ              1
   15 00000000 00000003 
                       TimerModeResetAndInterrupt
                               equ              3
   16 00000000 00000001 
                       TimerResetTimer0Interrupt
                               equ              1
   17 00000000 000000FF 
                       TimerResetAllInterrupts
                               equ              0xFF
   18 00000000         
   19 00000000         ; VIC Stuff -- UM, Table 41
   20 00000000 FFFFF000 
                       VIC     equ              0xFFFFF000  ; VIC Base Address
   21 00000000 00000010 
                       IntEnable
                               equ              0x10
   22 00000000 00000030 
                       VectAddr
                               equ              0x30
   23 00000000 00000100 
                       VectAddr0
                               equ              0x100
   24 00000000 00000200 
                       VectCtrl0
                               equ              0x200
   25 00000000         
   26 00000000 00000004 
                       Timer0ChannelNumber
                               equ              4           ; UM, Table 63
   27 00000000 00000010 



ARM Macro Assembler    Page 2 


                       Timer0Mask
                               equ              1<<Timer0ChannelNumber 
                                                            ; UM, Table 63
   28 00000000 00000005 
                       IRQslot_en
                               equ              5           ; UM, Table 58
   29 00000000         
   30 00000000 E0028008 
                       IO0DIR  EQU              0xE0028008
   31 00000000 E0028000 
                       IO0PIN  EQU              0xE0028000
   32 00000000 E0028004 
                       IO0SET  EQU              0xE0028004
   33 00000000 E002800C 
                       IO0CLR  EQU              0xE002800C
   34 00000000         
   35 00000000 00020000 
                       Red     EQU              0x00020000
   36 00000000 00200000 
                       Green   EQU              0x00200000
   37 00000000 00040000 
                       Blue    EQU              0x00040000
   38 00000000         
   39 00000000 E0028018 
                       IO1DIR  EQU              0xE0028018
   40 00000000 E0028014 
                       IO1SET  EQU              0xE0028014
   41 00000000 E002801C 
                       IO1CLR  EQU              0xE002801C
   42 00000000 E0028010 
                       IO1PIN  EQU              0xE0028010
   43 00000000         
   44 00000000 00000044 
                       StdStackOffset
                               EQU              0x44
   45 00000000         
   46 00000000                 AREA             InitialisationAndMain, CODE, RE
ADONLY
   47 00000000                 IMPORT           main
   48 00000000         
   49 00000000                 EXPORT           start
   50 00000000         start
   51 00000000         ; initialisation code
   52 00000000         
   53 00000000         ; Initialise the VIC
   54 00000000 E59F03FC        ldr              r0,=VIC     ; looking at you, V
                                                            IC!
   55 00000004         
   56 00000004 E59F13FC        ldr              r1,=irqhan
   57 00000008 E5801100        str              r1,[r0,#VectAddr0] ; associate 
                                                            our interrupt handl
                                                            er with Vectored In
                                                            terrupt 0
   58 0000000C         
   59 0000000C E3A01024        mov              r1,#Timer0ChannelNumber+(1<<IRQ
slot_en)
   60 00000010 E5801200        str              r1,[r0,#VectCtrl0] ; make Timer
                                                             0 interrupts the s
                                                            ource of Vectored I



ARM Macro Assembler    Page 3 


                                                            nterrupt 0
   61 00000014         
   62 00000014 E3A01010        mov              r1,#Timer0Mask
   63 00000018 E5801010        str              r1,[r0,#IntEnable] ; enable Tim
                                                            er 0 interrupts to 
                                                            be recognised by th
                                                            e VIC
   64 0000001C         
   65 0000001C E3A01000        mov              r1,#0
   66 00000020 E5801030        str              r1,[r0,#VectAddr] ; remove any 
                                                            pending interrupt (
                                                            may not be needed)
   67 00000024         
   68 00000024         ; Initialise Timer 0
   69 00000024 E59F03E0        ldr              r0,=T0      ; looking at you, T
                                                            imer 0!
   70 00000028         
   71 00000028 E3A01002        mov              r1,#TimerCommandReset
   72 0000002C E5801004        str              r1,[r0,#TCR]
   73 00000030         
   74 00000030 E3A010FF        mov              r1,#TimerResetAllInterrupts
   75 00000034 E5801000        str              r1,[r0,#IR]
   76 00000038         
   77 00000038 E59F13D0        ldr              r1,=(14745600/200)-1 ; 5 ms = 1
                                                            /200 second
   78 0000003C E5801018        str              r1,[r0,#MR0]
   79 00000040         
   80 00000040 E3A01003        mov              r1,#TimerModeResetAndInterrupt
   81 00000044 E5801014        str              r1,[r0,#MCR]
   82 00000048         
   83 00000048 E3A01001        mov              r1,#TimerCommandRun
   84 0000004C E5801004        str              r1,[r0,#TCR]
   85 00000050         ; timer initialisation done
   86 00000050         
   87 00000050         ;process initialisation time
   88 00000050         
   89 00000050         ;MSR CPSR_C, #12 ;switch to IRQ mode for stack access
   90 00000050 E59FD3BC        LDR              SP, =IRQStack ;fancy new stack 
                                                            for a fancy new dam
                                                            e
   91 00000054 E20D0004        AND              R0, SP, #4  ;align stack
   92 00000058 E08DD000        ADD              SP, SP, R0
   93 0000005C         
   94 0000005C         
   95 0000005C         
   96 0000005C E9AD1FFF        STMFA            sp!, {R0-R12}
   97 00000060 E59F03B0        LDR              R0, =procAStack ;new stack
   98 00000064         ;make stack full decending
   99 00000064 E59F13B0        LDR              R1, =stackSize
  100 00000068 E5911000        LDR              R1, [R1]
  101 0000006C E0800001        ADD              R0, R0, R1
  102 00000070         ;done making stack full decending
  103 00000070 E2001004        AND              R1, R0, #4  ;align stack
  104 00000074 E0400001        SUB              R0, R0, R1
  105 00000078         
  106 00000078 E3A01000        LDR              R1, =0      ;R14 *********
  107 0000007C E59F239C        LDR              R2, =LEDTime ;First line of pro
                                                            cess??
  108 00000080 E3A03000        LDR              R3, =0      ;CPSR flags are nul



ARM Macro Assembler    Page 4 


                                                            l
  109 00000084 E9AD000F        STMFA            sp!, {R0-R3}
  110 00000088 E28D0044        ADD              R0, R13, #StdStackOffset
  111 0000008C E9AD0001        STMFA            sp!, {R0}
  112 00000090         
  113 00000090         
  114 00000090         
  115 00000090 E9AD1FFF        STMFA            sp!, {R0-R12}
  116 00000094 E59F0388        LDR              R0, =procBStack
  117 00000098         ;make stack full decending
  118 00000098 E59F137C        LDR              R1, =stackSize
  119 0000009C E5911000        LDR              R1, [R1]
  120 000000A0 E0800001        ADD              R0, R0, R1
  121 000000A4         ;make stack full decending
  122 000000A4 E2001004        AND              R1, R0, #4  ;align stack
  123 000000A8 E0400001        SUB              R0, R0, R1
  124 000000AC         
  125 000000AC         
  126 000000AC E3A01000        LDR              R1, =0      ;R14 *********
  127 000000B0 E59F2370        LDR              R2, =CalcTime ;First line of pr
                                                            ocess??
  128 000000B4 E3A03000        LDR              R3, =0      ;CPSR flags are nul
                                                            l
  129 000000B8 E9AD000F        STMFA            sp!, {R0-R3}
  130 000000BC E28D0044        ADD              R0, R13, #StdStackOffset
  131 000000C0 E9AD0001        STMFA            sp!, {R0}
  132 000000C4         
  133 000000C4         ;add blank space for first run
  134 000000C4 E28DD044        ADD              R13, R13, #StdStackOffset
  135 000000C8 E59F0344        LDR              R0, =IRQStack
  136 000000CC         
  137 000000CC E2001004        AND              R1, R0, #4  ;align stack
  138 000000D0 E0810000        ADD              R0, R1, R0
  139 000000D4         
  140 000000D4 E2800044        ADD              R0, R0, #StdStackOffset
  141 000000D8 E2400004        SUB              R0, R0, #4
  142 000000DC         
  143 000000DC E9AD0001        STMFA            sp!, {R0}
  144 000000E0 E24DD044        SUB              R13, R13, #StdStackOffset
  145 000000E4 E24DD004        SUB              R13, R13, #4
  146 000000E8         
  147 000000E8 E59F033C        LDR              R0, =IRQSP
  148 000000EC E580D000        STR              R13, [R0]
  149 000000F0         
  150 000000F0 EAFFFFFE 
                       doneThreadSetup
                               B                doneThreadSetup
  151 000000F4         
  152 000000F4         
  153 000000F4         ;from here, initialisation is finished, so it should be 
                       the main body of the main program
  154 000000F4         
  155 000000F4         
  156 000000F4         LEDTime
  157 000000F4         ; Set pins P0.17, P0.18 and P0.21 as outputs
  158 000000F4 E59F033C        LDR              R0, =IO0DIR ; load IO directory
                                                            
  159 000000F8 E5901000        LDR              R1, [R0]    ; get the value at 
                                                            the pins



ARM Macro Assembler    Page 5 


  160 000000FC E3811826        ORR              R1, R1, #0x00260000 ; get pinma
                                                            sk to set as output
                                                            s
  161 00000100 E5801000        STR              R1, [R0]    ; set the pins as o
                                                            utputs
  162 00000104         
  163 00000104         ; Clear the LED's
  164 00000104 E59F0330        LDR              R0, =IO0SET ; load the pin addr
                                                            
  165 00000108 E5801000        STR              R1, [R0]    ; store mask in pin
                                                             addr
  166 0000010C         
  167 0000010C E3A00064        LDR              R0, =100    ; init counter
  168 00000110 E3A02602        LDR              R2, =Green  ; first colour = gr
                                                            een
  169 00000114 E59F3324        LDR              R3, =IO0CLR ; load register for
                                                             turning on LED's
  170 00000118 E5832000        STR              R2, [R3]    ; setColour(green)
  171 0000011C E59F4318        LDR              R4, =IO0SET ; load register for
                                                             turning off LED's
  172 00000120 E3A05826        LDR              R5, =0x00260000 ; load clearing
                                                             mask
  173 00000124         
  174 00000124         foreverLoopLED                       ; while(true){
  175 00000124 E59F1304        LDR              R1, =noOfCycles ;   timerCounte
                                                            r = loadCounterAddr
                                                            ()
  176 00000128 E5911000        LDR              R1, [R1]    ;   timerCounter = 
                                                            loadCounter(counter
                                                            Addr)
  177 0000012C E1500001        CMP              R0, R1      ;  if(counter < tim
                                                            erCounter) 
  178 00000130 CAFFFFFB        BGT              foreverLoopLED ;   continue
  179 00000134 E2800064        ADD              R0, R0, #100 ;  counter += 200 
                                                            //add one second
  180 00000138         ;
  181 00000138 E5845000        STR              R5, [R4]    ;  clearLEDs(cleari
                                                            ngMask)
  182 0000013C         ;
  183 0000013C E3520802        CMP              R2, #Red    ;  if(currentColour
                                                             == Red)
  184 00000140 0A000002        BEQ              nowGreen    ;   break(green)
  185 00000144 E3520602        CMP              R2, #Green  ;  if(currentColour
                                                             == Green)
  186 00000148 0A000003        BEQ              nowBlue     ;   break(blue)
  187 0000014C EA000005        B                nowRed      ;  else{ break(red)
                                                             }
  188 00000150         ;
  189 00000150         nowGreen                             ;  *green*
  190 00000150 E3A02602        LDR              R2, =Green  ;  currentColour = 
                                                            green
  191 00000154 E5832000        STR              R2, [R3]    ;  setColour(curren
                                                            tColour)
  192 00000158 EAFFFFF1        B                foreverLoopLED ;  continue
  193 0000015C         ;
  194 0000015C         nowBlue                              ;  *blue*
  195 0000015C E3A02701        LDR              R2, =Blue   ;  currentColour = 
                                                            blue
  196 00000160 E5832000        STR              R2, [R3]    ;  setColour(curren



ARM Macro Assembler    Page 6 


                                                            tColour) 
  197 00000164 EAFFFFEE        B                foreverLoopLED ;  continue
  198 00000168         ;
  199 00000168         nowRed                               ;  *red*
  200 00000168 E3A02802        LDR              R2, =Red    ;  currentColour = 
                                                            red
  201 0000016C E5832000        STR              R2, [R3]    ;  setColour(curren
                                                            tColour)
  202 00000170 EAFFFFEB        B                foreverLoopLED ;  continue
  203 00000174         ; }
  204 00000174         
  205 00000174         
  206 00000174         
  207 00000174         
  208 00000174         CalcTime
  209 00000174 E3A00000        LDR              R0, =0
  210 00000178 E3A01000        LDR              R1, =0
  211 0000017C E3A02000        LDR              R2, =0
  212 00000180 E3A03000        LDR              R3, =0
  213 00000184 E3A04000        LDR              R4, =0
  214 00000188 E3A05000        LDR              R5, =0
  215 0000018C E3A06000        LDR              R6, =0
  216 00000190 E3A07000        LDR              R7, =0
  217 00000194 E3A08001        LDR              R8, =1
  218 00000198 E3A09000        LDR              R9, =0
  219 0000019C E3A0A000        LDR              R10, =0
  220 000001A0         
  221 000001A0 E59F12A0        LDR              R1, =IO1DIR
  222 000001A4 E3A0280F        LDR              R2, =0x000F0000 ; select P1.19 
                                                            through P1.16
  223 000001A8 E5812000        STR              R2, [R1]    ; set as outputs
  224 000001AC E59F1298        LDR              R1, =IO1SET ; 
  225 000001B0 E5812000        STR              R2, [R1]    ; set the bits to t
                                                            urn off the LEDs
  226 000001B4 E59F2294        LDR              R2, =IO1CLR
  227 000001B8 E59F3294        LDR              R3, =IO1PIN
  228 000001BC         
  229 000001BC         ; R0 = button
  230 000001BC         ; R5 = displayingOldResult
  231 000001BC         ; R6 = num1
  232 000001BC         ; R7 = num2
  233 000001BC         ; R8 = first boolean
  234 000001BC         ; R9 = operand
  235 000001BC         ; R10 = opTmp 
  236 000001BC         foreverLoop
  237 000001BC EB000041        BL               getPress    ; button = getPress
                                                            ()
  238 000001C0         
  239 000001C0 E3500000        CMP              R0, #0      ; if(button == 0) /
                                                            /nothing pressed
  240 000001C4 0AFFFFFC        BEQ              foreverLoop ; {break to top}
  241 000001C8         
  242 000001C8 E3700017        CMP              R0, #-23    ; if(button == rese
                                                            t)
  243 000001CC 0AFFFFFE        BEQ              start       ; {reset()}
  244 000001D0         
  245 000001D0 E3550001        CMP              R5, #1      ; if(displayingOldR
                                                            esult)
  246 000001D4 1A000007        BNE              increment   ; {



ARM Macro Assembler    Page 7 


  247 000001D8 E3500014        CMP              R0, #20     ; if( button == inc
                                                            rease
  248 000001DC 0A000001        BEQ              clearDisp   ; ||
  249 000001E0 E3500015        CMP              R0, #21     ; button == decreas
                                                            e)
  250 000001E4 1AFFFFF4        BNE              foreverLoop ; {
  251 000001E8         clearDisp                            ;  
  252 000001E8 E3A05000        LDR              R5, =0      ;  displayingOldRes
                                                            ult = false
  253 000001EC E3A00000        LDR              R0, =0      ;  button = 0
  254 000001F0 EB000063        BL               dispNum     ;  dispNum(button)
  255 000001F4 EAFFFFF0        B                foreverLoop ; }else{ break to t
                                                            op }
  256 000001F8         ; }else{ continue}
  257 000001F8         
  258 000001F8         increment                            ;     
  259 000001F8 E3500014        CMP              R0, #20     ; if(button == incr
                                                            ease)
  260 000001FC 1A000006        BNE              decrement   ; {
  261 00000200 E3560007        CMP              R6,#7       ; if(num1 >= 7){
  262 00000204 BA000002        BLT              plusOne     ; 
  263 00000208 E1A00006        MOV              R0, R6      ;  button = num1
  264 0000020C EB000067        BL               flashNum    ;  flashNum(button)
                                                            
  265 00000210 EAFFFFE9        B                foreverLoop ;  B to start
  266 00000214         plusOne                              ; }else{
  267 00000214 E2866001        ADD              R6,R6,#1    ;   num1++ }
  268 00000218 EA000026        B                finish      ; }
  269 0000021C         decrement                            ;
  270 0000021C E3500015        CMP              R0,#21      ; elif(button == de
                                                            crease)
  271 00000220 1A000006        BNE              adder       ; {
  272 00000224 E3760008        CMP              R6,#-8      ;  if(num1<= -8){
  273 00000228 CA000002        BGT              minusOne    ; 
  274 0000022C E1A00006        MOV              R0, R6      ;  button = num1
  275 00000230 EB00005E        BL               flashNum    ;  flashNum(button)
                                                            
  276 00000234 EAFFFFE0        B                foreverLoop ;  B to start
  277 00000238         minusOne                             ; }else{ 
  278 00000238 E2466001        SUB              R6,R6,#1    ;  num--
  279 0000023C EA00001D        B                finish      ; }
  280 00000240         adder                                ;
  281 00000240 E3500016        CMP              R0, #22     ; elif(button == ad
                                                            d) 
  282 00000244 1A000012        BNE              subber      ; {
  283 00000248 E3A0A001        LDR              R10, =1     ; opTmp = '+'
  284 0000024C         
  285 0000024C         subPressed
  286 0000024C E3580000        CMP              R8, #0      ;  if(isFirst)
  287 00000250 0A000004        BEQ              mathTwo     ; {
  288 00000254 E1A07006        MOV              R7, R6      ;  num2 = num1
  289 00000258 E3A06000        LDR              R6, =0      ;  num1 = 0
  290 0000025C E3A08000        LDR              R8, =0      ;  isFirst = false
  291 00000260 E1A0900A        MOV              R9, R10     ;   operand = opTmp
                                                            
  292 00000264 EA000013        B                finish      ; }
  293 00000268         mathTwo                              ; else{
  294 00000268 E3A05001        LDR              R5, =1      ;  displayingOldRes
                                                            ult = true



ARM Macro Assembler    Page 8 


  295 0000026C E3590001        CMP              R9, #1      ;  if(operand == '+
                                                            ')
  296 00000270 1A000001        BNE              subOne      ;  {
  297 00000274 E0877006        ADD              R7, R7, R6  ;   num2 = num1 + n
                                                            um2
  298 00000278 EA000000        B                dispResult  ;   break to displa
                                                            y
  299 0000027C         subOne                               ;  }else{
  300 0000027C E0477006        SUB              R7, R7, R6  ;   num2 = num2 - n
                                                            um1
  301 00000280         dispResult                           ;  }
  302 00000280 E3A06000        LDR              R6, =0      ;  num1 = 0
  303 00000284 E1A00007        MOV              R0, R7      ;  button = num2
  304 00000288 EB00003D        BL               dispNum     ;  dispNum(button)
  305 0000028C E1A0900A        MOV              R9, R10     ;   operand = opTmp
                                                            
  306 00000290 EAFFFFC9        B                foreverLoop ;
  307 00000294         
  308 00000294         subber
  309 00000294 E3500017        CMP              R0,#23      ; elif(button == su
                                                            b)
  310 00000298 1A000001        BNE              longPressAdd ; {
  311 0000029C E3A0A000        LDR              R10, =0     ; operand = '-'
  312 000002A0 EAFFFFE9        B                subPressed  ; break to math sec
                                                            tion above
  313 000002A4         
  314 000002A4         longPressAdd
  315 000002A4 E3700016        CMP              R0,#-22     ; elif(button == cl
                                                            ear last)
  316 000002A8 1A000002        BNE              finish      ; {
  317 000002AC E1A06007        MOV              R6, R7      ; num1 = num2
  318 000002B0 E3A08001        LDR              R8, =1      ; isFirst = true
  319 000002B4 EAFFFFFF        B                finish      ; }
  320 000002B8         
  321 000002B8         
  322 000002B8         finish
  323 000002B8 E1A00006        MOV              R0, R6      ; button = num1
  324 000002BC EB000030        BL               dispNum     ; dispNum(button)
  325 000002C0 EAFFFFBD        B                foreverLoop ; }
  326 000002C4         
  327 000002C4 EAFFFFFE 
                       stop    B                stop
  328 000002C8         
  329 000002C8         ;Returns pressed key in R0
  330 000002C8         getPress
  331 000002C8 E92D403E        STMFD            sp!, {R1-R5, LR}
  332 000002CC         ; R0 = original values
  333 000002CC         ; R1 = mask
  334 000002CC         ; R2 = isLongPress
  335 000002CC         ; R3 = timerDelay
  336 000002CC         ; R4 = button addr
  337 000002CC         ; R5 = button values
  338 000002CC         
  339 000002CC E59F0180        LDR              R0, =IO1PIN ; load button addr
  340 000002D0 E5900000        LDR              R0, [R0]    ; load originalValu
                                                            e
  341 000002D4 E3A0160F        LDR              R1, =0x00F00000 ; load mask
  342 000002D8 E0010000        AND              R0, R1, R0  ; originalValue &= 
                                                            mask



ARM Macro Assembler    Page 9 


  343 000002DC         
  344 000002DC E1510000        CMP              R1, R0      ; if(button values 
                                                            == mask)
  345 000002E0 1A000001        BNE              pressedGetPress ; {
  346 000002E4 E3A00000        LDR              R0, =0      ;  originalValue = 
                                                            0
  347 000002E8 EA000024        B                nonePressed ; }
  348 000002EC         pressedGetPress                      ; else{
  349 000002EC E3A02001        LDR              R2, =1      ;   isLongPress = 1
                                                            
  350 000002F0 E59F3160        LDR              R3, =600000 ;   timerDelay
  351 000002F4 E59F4158        LDR              R4, =IO1PIN ;  load button addr
                                                            
  352 000002F8         
  353 000002F8         waitTimeGetPress
  354 000002F8 E2533001        SUBS             R3, R3, #1  ;  while(timerdelay
                                                            )
  355 000002FC 0A000005        BEQ              doneWaitGetPress ;  {
  356 00000300 E5945000        LDR              R5, [R4]    ;    load button va
                                                            lues()
  357 00000304 E0055001        AND              R5, R5, R1  ;   button values &
                                                            = mask
  358 00000308 E1550000        CMP              R5, R0      ;   if (original va
                                                            lues != button valu
                                                            es){
  359 0000030C 0AFFFFF9        BEQ              waitTimeGetPress ;    isLongPre
                                                            ss = false
  360 00000310 E3A02000        LDR              R2, =0      ;    break
  361 00000314 EA000003        B                shortPressGetPress ;
  362 00000318         doneWaitGetPress                     ;   }
  363 00000318 E5945000        LDR              R5, [R4]    ;    load button va
                                                            lues()
  364 0000031C E0055001        AND              R5, R5, R1  ;   button values &
                                                            = mask
  365 00000320 E1550000        CMP              R5, R0      ;   while(button va
                                                            lues == originalVal
                                                            ues)
  366 00000324 0AFFFFFB        BEQ              doneWaitGetPress ;   {wait()}
  367 00000328         shortPressGetPress
  368 00000328 E0200001        EOR              R0, R0, R1  ;   originalValue X
                                                            OR mask
  369 0000032C E1A00A20        LSR              R0, #20     ;   originalValue >
                                                            > 20
  370 00000330         
  371 00000330 E3500001        CMP              R0, #1      ;   if(originalValu
                                                            e == 1)
  372 00000334 1A000001        BNE              chkTwoGetPress ;   {
  373 00000338 E3A00014        LDR              R0, =20     ;    originalValue 
                                                            = 20
  374 0000033C EA000008        B                mayNegGetPress ;   }
  375 00000340         chkTwoGetPress                       ;
  376 00000340 E3500002        CMP              R0, #2      ;   else if(origina
                                                            lValue == 2)
  377 00000344 1A000001        BNE              chkFourGetPress ;   {
  378 00000348 E3A00015        LDR              R0, =21     ;    originalValue 
                                                            = 21
  379 0000034C EA000004        B                mayNegGetPress ;   }
  380 00000350         chkFourGetPress                      ;  
  381 00000350 E3500004        CMP              R0, #4      ;   else if(origina



ARM Macro Assembler    Page 10 


                                                            lValue == 4)
  382 00000354 1A000001        BNE              chk8GetPress ;   {
  383 00000358 E3A00016        LDR              R0, =22     ;    originalValue 
                                                            = 22
  384 0000035C EA000000        B                mayNegGetPress ;   }  
  385 00000360         chk8GetPress                         ;  else {
  386 00000360 E3A00017        LDR              R0, =23     ;    originalValue 
                                                            = 23
  387 00000364         mayNegGetPress                       ;   }
  388 00000364 E3520000        CMP              R2, #0      ;   if(isLongPress)
                                                            
  389 00000368 0A000000        BEQ              notNegGetPress ;   {
  390 0000036C E2600000        NEG              R0, R0      ;    originalValue 
                                                            = 2'sComplementOf(o
                                                            riginalValue)
  391 00000370         notNegGetPress                       ;   }
  392 00000370         ;  //COMPENSATE FOR SWITCH BOUNCE
  393 00000370 E1A01000        MOV              R1, R0      ;   resTmp = origin
                                                            alValue
  394 00000374 E59F00E0        LDR              R0, =200000 ;   waitTime
  395 00000378 EB00001D        BL               wait        ;   wait(waitTime)
  396 0000037C E1A00001        MOV              R0, R1      ;   originalValue =
                                                             resTmp
  397 00000380         nonePressed                          ; }
  398 00000380 E8BD803E        LDMFD            sp!, {R1-R5, PC}
  399 00000384         
  400 00000384         ;Takes number in R0
  401 00000384         ;Num in range (-8 <= x <= 7)
  402 00000384         dispNum
  403 00000384 E92D4006        STMFD            sp!, {R1-R2, LR}
  404 00000388 E59F10BC        LDR              R1, =IO1SET ; load set reg
  405 0000038C E3A0280F        LDR              R2, =0x000F0000 ; load mask
  406 00000390 E5812000        STR              R2, [R1]    ; turn off LEDs usi
                                                            ng mask
  407 00000394         
  408 00000394 E59F10B4        LDR              R1, =IO1CLR ; load clear reg
  409 00000398 E2800008        ADD              R0, R0, #8  ; num += arrayOffse
                                                            t
  410 0000039C E59F2090        LDR              R2, =dispArray ; load array add
                                                            ress
  411 000003A0 E7922000        LDR              R2, [R2, R0] ; load value to di
                                                            splay from array
  412 000003A4 E1A02802        LSL              R2, #16     ; Shift to compensa
                                                            te for location off
                                                            set
  413 000003A8 E5812000        STR              R2, [R1]    ; Set bits to turn 
                                                            on LEDs
  414 000003AC E8BD8006        LDMFD            sp!, {R1-R2, PC}
  415 000003B0         
  416 000003B0         ;Takes a number in R0
  417 000003B0         ;Num in range (-8 <= x <= 7)
  418 000003B0         flashNum
  419 000003B0 E92D401E        STMFD            sp!, {R1-R4, LR}
  420 000003B4 E1A01000        MOV              R1, R0      ; numTmp = num
  421 000003B8 E3A03003        LDR              R3, =3      ; number of flashes
                                                             = 3
  422 000003BC E59F40A0        LDR              R4, =1000000 ; waitTime
  423 000003C0         notDoneFlashNum                      ;
  424 000003C0 E3530000        CMP              R3, #0      ; while(number of f



ARM Macro Assembler    Page 11 


                                                            lashes > 0)
  425 000003C4 0A000009        BEQ              doneAllFlashNum ; {
  426 000003C8 E2433001        SUB              R3, R3, #1  ;  number of flashe
                                                            s --
  427 000003CC E3A00000        LDR              R0, =0      ; load 0 to display
                                                            
  428 000003D0 EBFFFFEB        BL               dispNum     ; show 0
  429 000003D4 E1A00004        MOV              R0, R4      ; load waitTime
  430 000003D8 EB000005        BL               wait        ; wait(waitTime)
  431 000003DC E1A00001        MOV              R0, R1      ; num = numTmp
  432 000003E0 EBFFFFE7        BL               dispNum     ; show(num)
  433 000003E4 E1A00004        MOV              R0, R4      ; load waitTime
  434 000003E8 EB000001        BL               wait        ; wait(waitTime)
  435 000003EC EAFFFFF3        B                notDoneFlashNum ; }
  436 000003F0         doneAllFlashNum
  437 000003F0 E8BD801E        LDMFD            sp!, {R1-R4, PC}
  438 000003F4         
  439 000003F4         
  440 000003F4         
  441 000003F4         ; wait an amount of cycles 
  442 000003F4         ; R0 = cycles
  443 000003F4         wait
  444 000003F4 E92D4000        STMFD            sp!, {LR}
  445 000003F8         loopWait                             ; while(cycles-- > 
                                                            0)
  446 000003F8 E2500001        SUBS             R0, R0, #1  ; {
  447 000003FC 1AFFFFFD        BNE              loopWait    ; }
  448 00000400 E8BD8000        LDMFD            sp!, {PC}
  449 00000404         
  450 00000404         
  451 00000404 FFFFF000 
              00000000 
              E0004000 
              00011FFF 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              E0028008 
              E0028004 
              E002800C 
              00000000 
              E0028018 
              E0028014 
              E002801C 
              E0028010 
              000927C0 
              00030D40 
              00000000 
              000F4240         AREA             InterruptStuff, CODE, READONLY
  452 00000000 E24EE004 
                       irqhan  sub              lr,lr,#4
  453 00000004 E59FD06C        LDR              SP, =IRQSP
  454 00000008 E59DD000        LDR              SP, [SP]



ARM Macro Assembler    Page 12 


  455 0000000C E28DD008        ADD              SP, #(2*4)
  456 00000010 E9AD1FFF        stmfa            sp!,{r0-r12}
  457 00000014 E10F0000        MRS              R0, CPSR    ; save CPSR
  458 00000018 E9AD0001        STMFA            SP!, {R0}   ; save CPSR 
  459 0000001C         
  460 0000001C         ;***********************************************
  461 0000001C E59F0058        LDR              R0, =noOfCycles 
                                                            ; load noOfCycles
  462 00000020 E5901000        LDR              R1, [R0]    ; ^^
  463 00000024 E2811001        ADD              R1, R1, #1  ; noOfCycles++
  464 00000028 E5801000        STR              R1, [R0]    ; store updated num
                                                            ber of cycles
  465 0000002C         
  466 0000002C         ;this is where we stop the timer from making the interru
                       pt request to the VIC
  467 0000002C         ;i.e. we 'acknowledge' the interrupt
  468 0000002C E59F004C        ldr              r0,=T0
  469 00000030 E3A01001        mov              r1,#TimerResetTimer0Interrupt
  470 00000034 E5801000        str              r1,[r0,#IR] ; remove MR0 interr
                                                            upt request from ti
                                                            mer
  471 00000038         
  472 00000038         ;here we stop the VIC from making the interrupt request 
                       to the CPU:
  473 00000038 E59F0044        ldr              r0,=VIC
  474 0000003C E3A01000        mov              r1,#0
  475 00000040 E5801030        str              r1,[r0,#VectAddr] ; reset VIC
  476 00000044         ;**********************************************
  477 00000044         
  478 00000044 E24DD040        SUB              SP, SP, #(16 * 4)
  479 00000048         
  480 00000048 E1A0000D        MOV              R0, SP      ; spTMP = IRQSP
  481 0000004C         
  482 0000004C E321F01F        MSR              CPSR_C, #0x1F ; switch to user 
                                                            mode
  483 00000050         
  484 00000050 E9A06000        STMFA            R0!, {SP,LR} ; save SP
  485 00000054         
  486 00000054         
  487 00000054 E280003C        ADD              R0, R0, #(15 * 4) ; sp++ //get 
                                                            to new sp location 
                                                            pointer
  488 00000058 E590D000        LDR              SP, [R0]    ; sp = pointer to n
                                                            ext thread
  489 0000005C         
  490 0000005C E59F0014        LDR              R0, =IRQSP
  491 00000060 E580D000        STR              SP, [R0]
  492 00000064         
  493 00000064         ;SUB SP, SP, #(2*4)
  494 00000064 E83D0001        LDMFA            sp!, {R0}   ;load thread CPSR
  495 00000068         
  496 00000068 E128F000        MSR              CPSR_f, R0  ;write thread CPSR
  497 0000006C         
  498 0000006C E81DBFFF        LDMFA            SP, {R0-R12, SP, PC} ;load all 
                                                            the registers
  499 00000070         
  500 00000070         
  501 00000070 E28DD040        ADD              SP, SP, #(16*4)
  502 00000074         ;LDMFD SP!



ARM Macro Assembler    Page 13 


  503 00000074         
  504 00000074         
  505 00000074         
  506 00000074         
  507 00000074         
  508 00000074         
  509 00000074         
  510 00000074         
  511 00000074         
  512 00000074         
  513 00000074         ;this is the body of the interrupt handler
  514 00000074         
  515 00000074         ;here you'd put the unique part of your interrupt handle
                       r
  516 00000074         ;all the other stuff is "housekeeping" to save registers
                        and acknowledge interrupts
  517 00000074         
  518 00000074         
  519 00000074         
  520 00000074         
  521 00000074         
  522 00000074         
  523 00000074 E87D8003        ldmfa            sp!,{r0-r1,pc}^ ; return from i
                                                            nterrupt, restoring
                                                             pc from lr
  524 00000078         ; and also restoring the CPSR
  525 00000078         
  526 00000078         
  527 00000078         
  528 00000078         
  529 00000078 00000000 
              00000000 
              E0004000 
              FFFFF000 
              00000000         AREA             StoreData, DATA, READWRITE
  530 00000000         
  531 00000000         procAStack
  532 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 14 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 15 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 16 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00            SPACE            512
  533 00000200         
  534 00000200         procBStack
  535 00000200 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 17 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 18 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 19 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00            SPACE            512
  536 00000400         
  537 00000400         IRQStack
  538 00000400 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 20 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 21 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 22 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00            SPACE            512
  539 00000600         
  540 00000600         IRQSP
  541 00000600 00000000        DCD              0x0
  542 00000604         
  543 00000604         
  544 00000604         stackSize
  545 00000604 00000200        DCD              0x200
  546 00000608         
  547 00000608         noOfCycles
  548 00000608 00000000        DCD              0x0
  549 0000060C         
  550 0000060C         
  551 0000060C         dispArray
  552 0000060C 01              DCB              2_0001
  553 0000060D 09              DCB              2_1001
  554 0000060E 05              DCB              2_0101
  555 0000060F 0D              DCB              2_1101
  556 00000610 03              DCB              2_0011
  557 00000611 0B              DCB              2_1011
  558 00000612 07              DCB              2_0111
  559 00000613 0F              DCB              2_1111
  560 00000614 00              DCB              2_0000
  561 00000615 08              DCB              2_1000
  562 00000616 04              DCB              2_0100
  563 00000617 0C              DCB              2_1100
  564 00000618 02              DCB              2_0010
  565 00000619 0A              DCB              2_1010
  566 0000061A 06              DCB              2_0110
  567 0000061B 0E              DCB              2_1110
  568 0000061C         
  569 0000061C                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\a
pp.d -o.\app.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Ke
il_v5\ARM\Inc\Philips --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 
1" --predefine="__UVISION_VERSION SETA 516" --list=.\listings\app.lst App.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CalcTime 00000174

Symbol: CalcTime
   Definitions
      At line 208 in file App.s
   Uses
      At line 127 in file App.s
Comment: CalcTime used once
InitialisationAndMain 00000000

Symbol: InitialisationAndMain
   Definitions
      At line 46 in file App.s
   Uses
      None
Comment: InitialisationAndMain unused
LEDTime 000000F4

Symbol: LEDTime
   Definitions
      At line 156 in file App.s
   Uses
      At line 107 in file App.s
Comment: LEDTime used once
adder 00000240

Symbol: adder
   Definitions
      At line 280 in file App.s
   Uses
      At line 271 in file App.s
Comment: adder used once
chk8GetPress 00000360

Symbol: chk8GetPress
   Definitions
      At line 385 in file App.s
   Uses
      At line 382 in file App.s
Comment: chk8GetPress used once
chkFourGetPress 00000350

Symbol: chkFourGetPress
   Definitions
      At line 380 in file App.s
   Uses
      At line 377 in file App.s
Comment: chkFourGetPress used once
chkTwoGetPress 00000340

Symbol: chkTwoGetPress
   Definitions
      At line 375 in file App.s
   Uses
      At line 372 in file App.s
Comment: chkTwoGetPress used once
clearDisp 000001E8

Symbol: clearDisp



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 251 in file App.s
   Uses
      At line 248 in file App.s
Comment: clearDisp used once
decrement 0000021C

Symbol: decrement
   Definitions
      At line 269 in file App.s
   Uses
      At line 260 in file App.s
Comment: decrement used once
dispNum 00000384

Symbol: dispNum
   Definitions
      At line 402 in file App.s
   Uses
      At line 254 in file App.s
      At line 304 in file App.s
      At line 324 in file App.s
      At line 428 in file App.s
      At line 432 in file App.s

dispResult 00000280

Symbol: dispResult
   Definitions
      At line 301 in file App.s
   Uses
      At line 298 in file App.s
Comment: dispResult used once
doneAllFlashNum 000003F0

Symbol: doneAllFlashNum
   Definitions
      At line 436 in file App.s
   Uses
      At line 425 in file App.s
Comment: doneAllFlashNum used once
doneThreadSetup 000000F0

Symbol: doneThreadSetup
   Definitions
      At line 150 in file App.s
   Uses
      At line 150 in file App.s
Comment: doneThreadSetup used once
doneWaitGetPress 00000318

Symbol: doneWaitGetPress
   Definitions
      At line 362 in file App.s
   Uses
      At line 355 in file App.s
      At line 366 in file App.s

finish 000002B8



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols


Symbol: finish
   Definitions
      At line 322 in file App.s
   Uses
      At line 268 in file App.s
      At line 279 in file App.s
      At line 292 in file App.s
      At line 316 in file App.s
      At line 319 in file App.s

flashNum 000003B0

Symbol: flashNum
   Definitions
      At line 418 in file App.s
   Uses
      At line 264 in file App.s
      At line 275 in file App.s

foreverLoop 000001BC

Symbol: foreverLoop
   Definitions
      At line 236 in file App.s
   Uses
      At line 240 in file App.s
      At line 250 in file App.s
      At line 255 in file App.s
      At line 265 in file App.s
      At line 276 in file App.s
      At line 306 in file App.s
      At line 325 in file App.s

foreverLoopLED 00000124

Symbol: foreverLoopLED
   Definitions
      At line 174 in file App.s
   Uses
      At line 178 in file App.s
      At line 192 in file App.s
      At line 197 in file App.s
      At line 202 in file App.s

getPress 000002C8

Symbol: getPress
   Definitions
      At line 330 in file App.s
   Uses
      At line 237 in file App.s
Comment: getPress used once
increment 000001F8

Symbol: increment
   Definitions
      At line 258 in file App.s
   Uses



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 246 in file App.s
Comment: increment used once
longPressAdd 000002A4

Symbol: longPressAdd
   Definitions
      At line 314 in file App.s
   Uses
      At line 310 in file App.s
Comment: longPressAdd used once
loopWait 000003F8

Symbol: loopWait
   Definitions
      At line 445 in file App.s
   Uses
      At line 447 in file App.s
Comment: loopWait used once
mathTwo 00000268

Symbol: mathTwo
   Definitions
      At line 293 in file App.s
   Uses
      At line 287 in file App.s
Comment: mathTwo used once
mayNegGetPress 00000364

Symbol: mayNegGetPress
   Definitions
      At line 387 in file App.s
   Uses
      At line 374 in file App.s
      At line 379 in file App.s
      At line 384 in file App.s

minusOne 00000238

Symbol: minusOne
   Definitions
      At line 277 in file App.s
   Uses
      At line 273 in file App.s
Comment: minusOne used once
nonePressed 00000380

Symbol: nonePressed
   Definitions
      At line 397 in file App.s
   Uses
      At line 347 in file App.s
Comment: nonePressed used once
notDoneFlashNum 000003C0

Symbol: notDoneFlashNum
   Definitions
      At line 423 in file App.s
   Uses
      At line 435 in file App.s



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

Comment: notDoneFlashNum used once
notNegGetPress 00000370

Symbol: notNegGetPress
   Definitions
      At line 391 in file App.s
   Uses
      At line 389 in file App.s
Comment: notNegGetPress used once
nowBlue 0000015C

Symbol: nowBlue
   Definitions
      At line 194 in file App.s
   Uses
      At line 186 in file App.s
Comment: nowBlue used once
nowGreen 00000150

Symbol: nowGreen
   Definitions
      At line 189 in file App.s
   Uses
      At line 184 in file App.s
Comment: nowGreen used once
nowRed 00000168

Symbol: nowRed
   Definitions
      At line 199 in file App.s
   Uses
      At line 187 in file App.s
Comment: nowRed used once
plusOne 00000214

Symbol: plusOne
   Definitions
      At line 266 in file App.s
   Uses
      At line 262 in file App.s
Comment: plusOne used once
pressedGetPress 000002EC

Symbol: pressedGetPress
   Definitions
      At line 348 in file App.s
   Uses
      At line 345 in file App.s
Comment: pressedGetPress used once
shortPressGetPress 00000328

Symbol: shortPressGetPress
   Definitions
      At line 367 in file App.s
   Uses
      At line 361 in file App.s
Comment: shortPressGetPress used once
start 00000000




ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

Symbol: start
   Definitions
      At line 50 in file App.s
   Uses
      At line 49 in file App.s
      At line 243 in file App.s

stop 000002C4

Symbol: stop
   Definitions
      At line 327 in file App.s
   Uses
      At line 327 in file App.s
Comment: stop used once
subOne 0000027C

Symbol: subOne
   Definitions
      At line 299 in file App.s
   Uses
      At line 296 in file App.s
Comment: subOne used once
subPressed 0000024C

Symbol: subPressed
   Definitions
      At line 285 in file App.s
   Uses
      At line 312 in file App.s
Comment: subPressed used once
subber 00000294

Symbol: subber
   Definitions
      At line 308 in file App.s
   Uses
      At line 282 in file App.s
Comment: subber used once
wait 000003F4

Symbol: wait
   Definitions
      At line 443 in file App.s
   Uses
      At line 395 in file App.s
      At line 430 in file App.s
      At line 434 in file App.s

waitTimeGetPress 000002F8

Symbol: waitTimeGetPress
   Definitions
      At line 353 in file App.s
   Uses
      At line 359 in file App.s
Comment: waitTimeGetPress used once
41 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

InterruptStuff 00000000

Symbol: InterruptStuff
   Definitions
      At line 451 in file App.s
   Uses
      None
Comment: InterruptStuff unused
irqhan 00000000

Symbol: irqhan
   Definitions
      At line 452 in file App.s
   Uses
      At line 56 in file App.s
Comment: irqhan used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

IRQSP 00000600

Symbol: IRQSP
   Definitions
      At line 540 in file App.s
   Uses
      At line 147 in file App.s
      At line 453 in file App.s
      At line 490 in file App.s

IRQStack 00000400

Symbol: IRQStack
   Definitions
      At line 537 in file App.s
   Uses
      At line 90 in file App.s
      At line 135 in file App.s

StoreData 00000000

Symbol: StoreData
   Definitions
      At line 529 in file App.s
   Uses
      None
Comment: StoreData unused
dispArray 0000060C

Symbol: dispArray
   Definitions
      At line 551 in file App.s
   Uses
      At line 410 in file App.s
Comment: dispArray used once
noOfCycles 00000608

Symbol: noOfCycles
   Definitions
      At line 547 in file App.s
   Uses
      At line 175 in file App.s
      At line 461 in file App.s

procAStack 00000000

Symbol: procAStack
   Definitions
      At line 531 in file App.s
   Uses
      At line 97 in file App.s
Comment: procAStack used once
procBStack 00000200

Symbol: procBStack
   Definitions
      At line 534 in file App.s
   Uses
      At line 116 in file App.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Comment: procBStack used once
stackSize 00000604

Symbol: stackSize
   Definitions
      At line 544 in file App.s
   Uses
      At line 99 in file App.s
      At line 118 in file App.s

8 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

Blue 00040000

Symbol: Blue
   Definitions
      At line 37 in file App.s
   Uses
      At line 195 in file App.s
Comment: Blue used once
Green 00200000

Symbol: Green
   Definitions
      At line 36 in file App.s
   Uses
      At line 168 in file App.s
      At line 185 in file App.s
      At line 190 in file App.s

IO0CLR E002800C

Symbol: IO0CLR
   Definitions
      At line 33 in file App.s
   Uses
      At line 169 in file App.s
Comment: IO0CLR used once
IO0DIR E0028008

Symbol: IO0DIR
   Definitions
      At line 30 in file App.s
   Uses
      At line 158 in file App.s
Comment: IO0DIR used once
IO0PIN E0028000

Symbol: IO0PIN
   Definitions
      At line 31 in file App.s
   Uses
      None
Comment: IO0PIN unused
IO0SET E0028004

Symbol: IO0SET
   Definitions
      At line 32 in file App.s
   Uses
      At line 164 in file App.s
      At line 171 in file App.s

IO1CLR E002801C

Symbol: IO1CLR
   Definitions
      At line 41 in file App.s
   Uses
      At line 226 in file App.s
      At line 408 in file App.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols


IO1DIR E0028018

Symbol: IO1DIR
   Definitions
      At line 39 in file App.s
   Uses
      At line 221 in file App.s
Comment: IO1DIR used once
IO1PIN E0028010

Symbol: IO1PIN
   Definitions
      At line 42 in file App.s
   Uses
      At line 227 in file App.s
      At line 339 in file App.s
      At line 351 in file App.s

IO1SET E0028014

Symbol: IO1SET
   Definitions
      At line 40 in file App.s
   Uses
      At line 224 in file App.s
      At line 404 in file App.s

IR 00000000

Symbol: IR
   Definitions
      At line 8 in file App.s
   Uses
      At line 75 in file App.s
      At line 470 in file App.s

IRQslot_en 00000005

Symbol: IRQslot_en
   Definitions
      At line 28 in file App.s
   Uses
      At line 59 in file App.s
Comment: IRQslot_en used once
IntEnable 00000010

Symbol: IntEnable
   Definitions
      At line 21 in file App.s
   Uses
      At line 63 in file App.s
Comment: IntEnable used once
MCR 00000014

Symbol: MCR
   Definitions
      At line 10 in file App.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

      At line 81 in file App.s
Comment: MCR used once
MR0 00000018

Symbol: MR0
   Definitions
      At line 11 in file App.s
   Uses
      At line 78 in file App.s
Comment: MR0 used once
Red 00020000

Symbol: Red
   Definitions
      At line 35 in file App.s
   Uses
      At line 183 in file App.s
      At line 200 in file App.s

StdStackOffset 00000044

Symbol: StdStackOffset
   Definitions
      At line 44 in file App.s
   Uses
      At line 110 in file App.s
      At line 130 in file App.s
      At line 134 in file App.s
      At line 140 in file App.s
      At line 144 in file App.s

T0 E0004000

Symbol: T0
   Definitions
      At line 5 in file App.s
   Uses
      At line 69 in file App.s
      At line 468 in file App.s

T1 E0008000

Symbol: T1
   Definitions
      At line 6 in file App.s
   Uses
      None
Comment: T1 unused
TCR 00000004

Symbol: TCR
   Definitions
      At line 9 in file App.s
   Uses
      At line 72 in file App.s
      At line 84 in file App.s

Timer0ChannelNumber 00000004




ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

Symbol: Timer0ChannelNumber
   Definitions
      At line 26 in file App.s
   Uses
      At line 27 in file App.s
      At line 59 in file App.s

Timer0Mask 00000010

Symbol: Timer0Mask
   Definitions
      At line 27 in file App.s
   Uses
      At line 62 in file App.s
Comment: Timer0Mask used once
TimerCommandReset 00000002

Symbol: TimerCommandReset
   Definitions
      At line 13 in file App.s
   Uses
      At line 71 in file App.s
Comment: TimerCommandReset used once
TimerCommandRun 00000001

Symbol: TimerCommandRun
   Definitions
      At line 14 in file App.s
   Uses
      At line 83 in file App.s
Comment: TimerCommandRun used once
TimerModeResetAndInterrupt 00000003

Symbol: TimerModeResetAndInterrupt
   Definitions
      At line 15 in file App.s
   Uses
      At line 80 in file App.s
Comment: TimerModeResetAndInterrupt used once
TimerResetAllInterrupts 000000FF

Symbol: TimerResetAllInterrupts
   Definitions
      At line 17 in file App.s
   Uses
      At line 74 in file App.s
Comment: TimerResetAllInterrupts used once
TimerResetTimer0Interrupt 00000001

Symbol: TimerResetTimer0Interrupt
   Definitions
      At line 16 in file App.s
   Uses
      At line 469 in file App.s
Comment: TimerResetTimer0Interrupt used once
VIC FFFFF000

Symbol: VIC
   Definitions



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Absolute symbols

      At line 20 in file App.s
   Uses
      At line 54 in file App.s
      At line 473 in file App.s

VectAddr 00000030

Symbol: VectAddr
   Definitions
      At line 22 in file App.s
   Uses
      At line 66 in file App.s
      At line 475 in file App.s

VectAddr0 00000100

Symbol: VectAddr0
   Definitions
      At line 23 in file App.s
   Uses
      At line 57 in file App.s
Comment: VectAddr0 used once
VectCtrl0 00000200

Symbol: VectCtrl0
   Definitions
      At line 24 in file App.s
   Uses
      At line 60 in file App.s
Comment: VectCtrl0 used once
31 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 47 in file App.s
   Uses
      None
Comment: main unused
1 symbol
420 symbols in table
