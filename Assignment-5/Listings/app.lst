


ARM Macro Assembler    Page 1 


    1 00000000         ; Definitions  -- references to 'UM' are to the User Man
                       ual.
    2 00000000         
    3 00000000         ; Timer Stuff -- UM, Table 173
    4 00000000         
    5 00000000 E0004000 
                       T0      equ              0xE0004000  ; Timer 0 Base Addr
                                                            ess
    6 00000000 E0008000 
                       T1      equ              0xE0008000
    7 00000000         
    8 00000000 00000000 
                       IR      equ              0           ; Add this to a tim
                                                            er's base address t
                                                            o get actual regist
                                                            er address
    9 00000000 00000004 
                       TCR     equ              4
   10 00000000 00000014 
                       MCR     equ              0x14
   11 00000000 00000018 
                       MR0     equ              0x18
   12 00000000         
   13 00000000 00000002 
                       TimerCommandReset
                               equ              2
   14 00000000 00000001 
                       TimerCommandRun
                               equ              1
   15 00000000 00000003 
                       TimerModeResetAndInterrupt
                               equ              3
   16 00000000 00000001 
                       TimerResetTimer0Interrupt
                               equ              1
   17 00000000 000000FF 
                       TimerResetAllInterrupts
                               equ              0xFF
   18 00000000         
   19 00000000         ; VIC Stuff -- UM, Table 41
   20 00000000 FFFFF000 
                       VIC     equ              0xFFFFF000  ; VIC Base Address
   21 00000000 00000010 
                       IntEnable
                               equ              0x10
   22 00000000 00000030 
                       VectAddr
                               equ              0x30
   23 00000000 00000100 
                       VectAddr0
                               equ              0x100
   24 00000000 00000200 
                       VectCtrl0
                               equ              0x200
   25 00000000         
   26 00000000 00000004 
                       Timer0ChannelNumber
                               equ              4           ; UM, Table 63
   27 00000000 00000010 



ARM Macro Assembler    Page 2 


                       Timer0Mask
                               equ              1<<Timer0ChannelNumber 
                                                            ; UM, Table 63
   28 00000000 00000005 
                       IRQslot_en
                               equ              5           ; UM, Table 58
   29 00000000         
   30 00000000 E0028008 
                       IO0DIR  EQU              0xE0028008
   31 00000000 E0028000 
                       IO0PIN  EQU              0xE0028000
   32 00000000 E0028004 
                       IO0SET  EQU              0xE0028004
   33 00000000 E002800C 
                       IO0CLR  EQU              0xE002800C
   34 00000000         
   35 00000000 00020000 
                       Red     EQU              0x00020000
   36 00000000 00200000 
                       Green   EQU              0x00200000
   37 00000000 00040000 
                       Blue    EQU              0x00040000
   38 00000000         
   39 00000000 E0028018 
                       IO1DIR  EQU              0xE0028018
   40 00000000 E0028014 
                       IO1SET  EQU              0xE0028014
   41 00000000 E002801C 
                       IO1CLR  EQU              0xE002801C
   42 00000000 E0028010 
                       IO1PIN  EQU              0xE0028010
   43 00000000         
   44 00000000 00000040 
                       StdStackOffset
                               EQU              0x40
   45 00000000         
   46 00000000                 AREA             InitialisationAndMain, CODE, RE
ADONLY
   47 00000000                 IMPORT           main
   48 00000000         
   49 00000000                 EXPORT           start
   50 00000000         start
   51 00000000         ; initialisation code
   52 00000000         
   53 00000000         ; Initialise the VIC
   54 00000000 E59F03F0        ldr              r0,=VIC     ; looking at you, V
                                                            IC!
   55 00000004         
   56 00000004 E59F13F0        ldr              r1,=irqhan
   57 00000008 E5801100        str              r1,[r0,#VectAddr0] ; associate 
                                                            our interrupt handl
                                                            er with Vectored In
                                                            terrupt 0
   58 0000000C         
   59 0000000C E3A01024        mov              r1,#Timer0ChannelNumber+(1<<IRQ
slot_en)
   60 00000010 E5801200        str              r1,[r0,#VectCtrl0] ; make Timer
                                                             0 interrupts the s
                                                            ource of Vectored I



ARM Macro Assembler    Page 3 


                                                            nterrupt 0
   61 00000014         
   62 00000014 E3A01010        mov              r1,#Timer0Mask
   63 00000018 E5801010        str              r1,[r0,#IntEnable] ; enable Tim
                                                            er 0 interrupts to 
                                                            be recognised by th
                                                            e VIC
   64 0000001C         
   65 0000001C E3A01000        mov              r1,#0
   66 00000020 E5801030        str              r1,[r0,#VectAddr] ; remove any 
                                                            pending interrupt (
                                                            may not be needed)
   67 00000024         
   68 00000024         ; Initialise Timer 0
   69 00000024 E59F03D4        ldr              r0,=T0      ; looking at you, T
                                                            imer 0!
   70 00000028         
   71 00000028 E3A01002        mov              r1,#TimerCommandReset
   72 0000002C E5801004        str              r1,[r0,#TCR]
   73 00000030         
   74 00000030 E3A010FF        mov              r1,#TimerResetAllInterrupts
   75 00000034 E5801000        str              r1,[r0,#IR]
   76 00000038         
   77 00000038 E59F13C4        ldr              r1,=(14745600/200)-1 ; 5 ms = 1
                                                            /200 second
   78 0000003C E5801018        str              r1,[r0,#MR0]
   79 00000040         
   80 00000040 E3A01003        mov              r1,#TimerModeResetAndInterrupt
   81 00000044 E5801014        str              r1,[r0,#MCR]
   82 00000048         
   83 00000048 E3A01001        mov              r1,#TimerCommandRun
   84 0000004C E5801004        str              r1,[r0,#TCR]
   85 00000050         ; timer initialisation done
   86 00000050         
   87 00000050         ;process initialisation time
   88 00000050         
   89 00000050         
   90 00000050         ;MSR CPSR_C, #12 ;switch to IRQ mode for stack access
   91 00000050 E59FD3B0        LDR              R13, =IRQStack ;fancy new stack
                                                             for a fancy new da
                                                            me
   92 00000054         
   93 00000054         
   94 00000054 E59F03B0        LDR              R0, =procAStack ;new stack
   95 00000058         ;make stack full decending
   96 00000058 E59F13B0        LDR              R1, =stackSize
   97 0000005C E5911000        LDR              R1, [R1]
   98 00000060 E0800001        ADD              R0, R0, R1
   99 00000064         ;done making stack full decending
  100 00000064 E59F13A8        LDR              R1, =LEDTime ;R14 *********
  101 00000068 E9AD0003        STMFA            sp!, {R0,R1}
  102 0000006C         
  103 0000006C         ;STMFA sp!, {R1}
  104 0000006C E9AD1FFF        STMFA            sp!, {R0-R12}
  105 00000070 E3A03000        LDR              R3, =0      ;CPSR flags are nul
                                                            l
  106 00000074 E9AD0008        STMFA            sp!, {R3}
  107 00000078 E28D0040        ADD              R0, R13, #StdStackOffset
  108 0000007C E2800004        ADD              R0, R0, #4



ARM Macro Assembler    Page 4 


  109 00000080 E9AD0001        STMFA            sp!, {R0}
  110 00000084         
  111 00000084         
  112 00000084 E59F038C        LDR              R0, =procBStack ;new stack
  113 00000088         ;make stack full decending
  114 00000088 E59F1380        LDR              R1, =stackSize
  115 0000008C E5911000        LDR              R1, [R1]
  116 00000090 E0800001        ADD              R0, R0, R1
  117 00000094         ;done making stack full decending
  118 00000094 E59F1380        LDR              R1, =CalcTime ;R14 *********
  119 00000098 E9AD0003        STMFA            sp!, {R0,R1}
  120 0000009C         
  121 0000009C         ;STMFA sp!, {R1}
  122 0000009C E9AD1FFF        STMFA            sp!, {R0-R12}
  123 000000A0 E3A03000        LDR              R3, =0      ;CPSR flags are nul
                                                            l
  124 000000A4 E9AD0008        STMFA            sp!, {R3}
  125 000000A8 E28D0040        ADD              R0, R13, #StdStackOffset
  126 000000AC E2800004        ADD              R0, R0, #4
  127 000000B0 E9AD0001        STMFA            sp!, {R0}
  128 000000B4         
  129 000000B4         
  130 000000B4         ;point back to first
  131 000000B4 E83D0001        LDMFA            SP!, {R0}
  132 000000B8 E59F0348        LDR              R0, =IRQStack
  133 000000BC E2800040        ADD              R0, R0, #StdStackOffset
  134 000000C0         ;SUB R0, R0, #4
  135 000000C0 E9AD0001        STMFA            sp!, {R0}
  136 000000C4         
  137 000000C4         
  138 000000C4         ;add blank space for first run
  139 000000C4 E28DD040        ADD              SP, SP, #StdStackOffset
  140 000000C8 E59F0338        LDR              R0, =IRQStack
  141 000000CC         
  142 000000CC         
  143 000000CC E2800040        ADD              R0, R0, #StdStackOffset
  144 000000D0         
  145 000000D0         
  146 000000D0 E9AD0001        STMFA            sp!, {R0}
  147 000000D4         
  148 000000D4         
  149 000000D4 E24DD040        SUB              SP, SP, #StdStackOffset
  150 000000D8 E24DD004        SUB              SP, SP, #4
  151 000000DC         
  152 000000DC E59F033C        LDR              R0, =IRQSP
  153 000000E0 E580D000        STR              SP, [R0]
  154 000000E4         
  155 000000E4 EAFFFFFE 
                       doneThreadSetup
                               B                doneThreadSetup
  156 000000E8         
  157 000000E8         
  158 000000E8         ;from here, initialisation is finished, so it should be 
                       the main body of the main program
  159 000000E8         
  160 000000E8         
  161 000000E8         LEDTime
  162 000000E8         ; Set pins P0.17, P0.18 and P0.21 as outputs
  163 000000E8 E59F0340        LDR              R0, =IO0DIR ; load IO directory



ARM Macro Assembler    Page 5 


                                                            
  164 000000EC E5901000        LDR              R1, [R0]    ; get the value at 
                                                            the pins
  165 000000F0 E3811826        ORR              R1, R1, #0x00260000 ; get pinma
                                                            sk to set as output
                                                            s
  166 000000F4 E5801000        STR              R1, [R0]    ; set the pins as o
                                                            utputs
  167 000000F8         
  168 000000F8         ; Clear the LED's
  169 000000F8 E59F0334        LDR              R0, =IO0SET ; load the pin addr
                                                            
  170 000000FC E5801000        STR              R1, [R0]    ; store mask in pin
                                                             addr
  171 00000100         
  172 00000100 E3A00064        LDR              R0, =100    ; init counter
  173 00000104 E3A02602        LDR              R2, =Green  ; first colour = gr
                                                            een
  174 00000108 E59F3328        LDR              R3, =IO0CLR ; load register for
                                                             turning on LED's
  175 0000010C E5832000        STR              R2, [R3]    ; setColour(green)
  176 00000110 E59F431C        LDR              R4, =IO0SET ; load register for
                                                             turning off LED's
  177 00000114 E3A05826        LDR              R5, =0x00260000 ; load clearing
                                                             mask
  178 00000118         
  179 00000118         foreverLoopLED                       ; while(true){
  180 00000118 E59F1304        LDR              R1, =noOfCycles ;   timerCounte
                                                            r = loadCounterAddr
                                                            ()
  181 0000011C E5911000        LDR              R1, [R1]    ;   timerCounter = 
                                                            loadCounter(counter
                                                            Addr)
  182 00000120 E1500001        CMP              R0, R1      ;  if(counter < tim
                                                            erCounter) 
  183 00000124 CAFFFFFB        BGT              foreverLoopLED ;   continue
  184 00000128 E2800064        ADD              R0, R0, #100 ;  counter += 200 
                                                            //add one second
  185 0000012C         ;
  186 0000012C E5845000        STR              R5, [R4]    ;  clearLEDs(cleari
                                                            ngMask)
  187 00000130         ;
  188 00000130 E3520802        CMP              R2, #Red    ;  if(currentColour
                                                             == Red)
  189 00000134 0A000002        BEQ              nowGreen    ;   break(green)
  190 00000138 E3520602        CMP              R2, #Green  ;  if(currentColour
                                                             == Green)
  191 0000013C 0A000003        BEQ              nowBlue     ;   break(blue)
  192 00000140 EA000005        B                nowRed      ;  else{ break(red)
                                                             }
  193 00000144         ;
  194 00000144         nowGreen                             ;  *green*
  195 00000144 E3A02602        LDR              R2, =Green  ;  currentColour = 
                                                            green
  196 00000148 E5832000        STR              R2, [R3]    ;  setColour(curren
                                                            tColour)
  197 0000014C EAFFFFF1        B                foreverLoopLED ;  continue
  198 00000150         ;
  199 00000150         nowBlue                              ;  *blue*



ARM Macro Assembler    Page 6 


  200 00000150 E3A02701        LDR              R2, =Blue   ;  currentColour = 
                                                            blue
  201 00000154 E5832000        STR              R2, [R3]    ;  setColour(curren
                                                            tColour) 
  202 00000158 EAFFFFEE        B                foreverLoopLED ;  continue
  203 0000015C         ;
  204 0000015C         nowRed                               ;  *red*
  205 0000015C E3A02802        LDR              R2, =Red    ;  currentColour = 
                                                            red
  206 00000160 E5832000        STR              R2, [R3]    ;  setColour(curren
                                                            tColour)
  207 00000164 EAFFFFEB        B                foreverLoopLED ;  continue
  208 00000168         ; }
  209 00000168         
  210 00000168         
  211 00000168         
  212 00000168         
  213 00000168         CalcTime
  214 00000168 E3A00000        LDR              R0, =0
  215 0000016C E3A01000        LDR              R1, =0
  216 00000170 E3A02000        LDR              R2, =0
  217 00000174 E3A03000        LDR              R3, =0
  218 00000178 E3A04000        LDR              R4, =0
  219 0000017C E3A05000        LDR              R5, =0
  220 00000180 E3A06000        LDR              R6, =0
  221 00000184 E3A07000        LDR              R7, =0
  222 00000188 E3A08001        LDR              R8, =1
  223 0000018C E3A09000        LDR              R9, =0
  224 00000190 E3A0A000        LDR              R10, =0
  225 00000194         
  226 00000194 E59F12A4        LDR              R1, =IO1DIR
  227 00000198 E3A0280F        LDR              R2, =0x000F0000 ; select P1.19 
                                                            through P1.16
  228 0000019C E5812000        STR              R2, [R1]    ; set as outputs
  229 000001A0 E59F129C        LDR              R1, =IO1SET ; 
  230 000001A4 E5812000        STR              R2, [R1]    ; set the bits to t
                                                            urn off the LEDs
  231 000001A8 E59F2298        LDR              R2, =IO1CLR
  232 000001AC E59F3298        LDR              R3, =IO1PIN
  233 000001B0         
  234 000001B0         ; R0 = button
  235 000001B0         ; R5 = displayingOldResult
  236 000001B0         ; R6 = num1
  237 000001B0         ; R7 = num2
  238 000001B0         ; R8 = first boolean
  239 000001B0         ; R9 = operand
  240 000001B0         ; R10 = opTmp 
  241 000001B0         foreverLoop
  242 000001B0 EB000041        BL               getPress    ; button = getPress
                                                            ()
  243 000001B4         
  244 000001B4 E3500000        CMP              R0, #0      ; if(button == 0) /
                                                            /nothing pressed
  245 000001B8 0AFFFFFC        BEQ              foreverLoop ; {break to top}
  246 000001BC         
  247 000001BC E3700017        CMP              R0, #-23    ; if(button == rese
                                                            t)
  248 000001C0 0AFFFFFE        BEQ              start       ; {reset()}
  249 000001C4         



ARM Macro Assembler    Page 7 


  250 000001C4 E3550001        CMP              R5, #1      ; if(displayingOldR
                                                            esult)
  251 000001C8 1A000007        BNE              increment   ; {
  252 000001CC E3500014        CMP              R0, #20     ; if( button == inc
                                                            rease
  253 000001D0 0A000001        BEQ              clearDisp   ; ||
  254 000001D4 E3500015        CMP              R0, #21     ; button == decreas
                                                            e)
  255 000001D8 1AFFFFF4        BNE              foreverLoop ; {
  256 000001DC         clearDisp                            ;  
  257 000001DC E3A05000        LDR              R5, =0      ;  displayingOldRes
                                                            ult = false
  258 000001E0 E3A00000        LDR              R0, =0      ;  button = 0
  259 000001E4 EB000063        BL               dispNum     ;  dispNum(button)
  260 000001E8 EAFFFFF0        B                foreverLoop ; }else{ break to t
                                                            op }
  261 000001EC         ; }else{ continue}
  262 000001EC         
  263 000001EC         increment                            ;     
  264 000001EC E3500014        CMP              R0, #20     ; if(button == incr
                                                            ease)
  265 000001F0 1A000006        BNE              decrement   ; {
  266 000001F4 E3560007        CMP              R6,#7       ; if(num1 >= 7){
  267 000001F8 BA000002        BLT              plusOne     ; 
  268 000001FC E1A00006        MOV              R0, R6      ;  button = num1
  269 00000200 EB000067        BL               flashNum    ;  flashNum(button)
                                                            
  270 00000204 EAFFFFE9        B                foreverLoop ;  B to start
  271 00000208         plusOne                              ; }else{
  272 00000208 E2866001        ADD              R6,R6,#1    ;   num1++ }
  273 0000020C EA000026        B                finish      ; }
  274 00000210         decrement                            ;
  275 00000210 E3500015        CMP              R0,#21      ; elif(button == de
                                                            crease)
  276 00000214 1A000006        BNE              adder       ; {
  277 00000218 E3760008        CMP              R6,#-8      ;  if(num1<= -8){
  278 0000021C CA000002        BGT              minusOne    ; 
  279 00000220 E1A00006        MOV              R0, R6      ;  button = num1
  280 00000224 EB00005E        BL               flashNum    ;  flashNum(button)
                                                            
  281 00000228 EAFFFFE0        B                foreverLoop ;  B to start
  282 0000022C         minusOne                             ; }else{ 
  283 0000022C E2466001        SUB              R6,R6,#1    ;  num--
  284 00000230 EA00001D        B                finish      ; }
  285 00000234         adder                                ;
  286 00000234 E3500016        CMP              R0, #22     ; elif(button == ad
                                                            d) 
  287 00000238 1A000012        BNE              subber      ; {
  288 0000023C E3A0A001        LDR              R10, =1     ; opTmp = '+'
  289 00000240         
  290 00000240         subPressed
  291 00000240 E3580000        CMP              R8, #0      ;  if(isFirst)
  292 00000244 0A000004        BEQ              mathTwo     ; {
  293 00000248 E1A07006        MOV              R7, R6      ;  num2 = num1
  294 0000024C E3A06000        LDR              R6, =0      ;  num1 = 0
  295 00000250 E3A08000        LDR              R8, =0      ;  isFirst = false
  296 00000254 E1A0900A        MOV              R9, R10     ;   operand = opTmp
                                                            
  297 00000258 EA000013        B                finish      ; }



ARM Macro Assembler    Page 8 


  298 0000025C         mathTwo                              ; else{
  299 0000025C E3A05001        LDR              R5, =1      ;  displayingOldRes
                                                            ult = true
  300 00000260 E3590001        CMP              R9, #1      ;  if(operand == '+
                                                            ')
  301 00000264 1A000001        BNE              subOne      ;  {
  302 00000268 E0877006        ADD              R7, R7, R6  ;   num2 = num1 + n
                                                            um2
  303 0000026C EA000000        B                dispResult  ;   break to displa
                                                            y
  304 00000270         subOne                               ;  }else{
  305 00000270 E0477006        SUB              R7, R7, R6  ;   num2 = num2 - n
                                                            um1
  306 00000274         dispResult                           ;  }
  307 00000274 E3A06000        LDR              R6, =0      ;  num1 = 0
  308 00000278 E1A00007        MOV              R0, R7      ;  button = num2
  309 0000027C EB00003D        BL               dispNum     ;  dispNum(button)
  310 00000280 E1A0900A        MOV              R9, R10     ;   operand = opTmp
                                                            
  311 00000284 EAFFFFC9        B                foreverLoop ;
  312 00000288         
  313 00000288         subber
  314 00000288 E3500017        CMP              R0,#23      ; elif(button == su
                                                            b)
  315 0000028C 1A000001        BNE              longPressAdd ; {
  316 00000290 E3A0A000        LDR              R10, =0     ; operand = '-'
  317 00000294 EAFFFFE9        B                subPressed  ; break to math sec
                                                            tion above
  318 00000298         
  319 00000298         longPressAdd
  320 00000298 E3700016        CMP              R0,#-22     ; elif(button == cl
                                                            ear last)
  321 0000029C 1A000002        BNE              finish      ; {
  322 000002A0 E1A06007        MOV              R6, R7      ; num1 = num2
  323 000002A4 E3A08001        LDR              R8, =1      ; isFirst = true
  324 000002A8 EAFFFFFF        B                finish      ; }
  325 000002AC         
  326 000002AC         
  327 000002AC         finish
  328 000002AC E1A00006        MOV              R0, R6      ; button = num1
  329 000002B0 EB000030        BL               dispNum     ; dispNum(button)
  330 000002B4 EAFFFFBD        B                foreverLoop ; }
  331 000002B8         
  332 000002B8 EAFFFFFE 
                       stop    B                stop
  333 000002BC         
  334 000002BC         ;Returns pressed key in R0
  335 000002BC         getPress
  336 000002BC E92D403E        STMFD            sp!, {R1-R5, LR}
  337 000002C0         ; R0 = original values
  338 000002C0         ; R1 = mask
  339 000002C0         ; R2 = isLongPress
  340 000002C0         ; R3 = timerDelay
  341 000002C0         ; R4 = button addr
  342 000002C0         ; R5 = button values
  343 000002C0         
  344 000002C0 E59F0184        LDR              R0, =IO1PIN ; load button addr
  345 000002C4 E5900000        LDR              R0, [R0]    ; load originalValu
                                                            e



ARM Macro Assembler    Page 9 


  346 000002C8 E3A0160F        LDR              R1, =0x00F00000 ; load mask
  347 000002CC E0010000        AND              R0, R1, R0  ; originalValue &= 
                                                            mask
  348 000002D0         
  349 000002D0 E1510000        CMP              R1, R0      ; if(button values 
                                                            == mask)
  350 000002D4 1A000001        BNE              pressedGetPress ; {
  351 000002D8 E3A00000        LDR              R0, =0      ;  originalValue = 
                                                            0
  352 000002DC EA000024        B                nonePressed ; }
  353 000002E0         pressedGetPress                      ; else{
  354 000002E0 E3A02001        LDR              R2, =1      ;   isLongPress = 1
                                                            
  355 000002E4 E59F3164        LDR              R3, =600000 ;   timerDelay
  356 000002E8 E59F415C        LDR              R4, =IO1PIN ;  load button addr
                                                            
  357 000002EC         
  358 000002EC         waitTimeGetPress
  359 000002EC E2533001        SUBS             R3, R3, #1  ;  while(timerdelay
                                                            )
  360 000002F0 0A000005        BEQ              doneWaitGetPress ;  {
  361 000002F4 E5945000        LDR              R5, [R4]    ;    load button va
                                                            lues()
  362 000002F8 E0055001        AND              R5, R5, R1  ;   button values &
                                                            = mask
  363 000002FC E1550000        CMP              R5, R0      ;   if (original va
                                                            lues != button valu
                                                            es){
  364 00000300 0AFFFFF9        BEQ              waitTimeGetPress ;    isLongPre
                                                            ss = false
  365 00000304 E3A02000        LDR              R2, =0      ;    break
  366 00000308 EA000003        B                shortPressGetPress ;
  367 0000030C         doneWaitGetPress                     ;   }
  368 0000030C E5945000        LDR              R5, [R4]    ;    load button va
                                                            lues()
  369 00000310 E0055001        AND              R5, R5, R1  ;   button values &
                                                            = mask
  370 00000314 E1550000        CMP              R5, R0      ;   while(button va
                                                            lues == originalVal
                                                            ues)
  371 00000318 0AFFFFFB        BEQ              doneWaitGetPress ;   {wait()}
  372 0000031C         shortPressGetPress
  373 0000031C E0200001        EOR              R0, R0, R1  ;   originalValue X
                                                            OR mask
  374 00000320 E1A00A20        LSR              R0, #20     ;   originalValue >
                                                            > 20
  375 00000324         
  376 00000324 E3500001        CMP              R0, #1      ;   if(originalValu
                                                            e == 1)
  377 00000328 1A000001        BNE              chkTwoGetPress ;   {
  378 0000032C E3A00014        LDR              R0, =20     ;    originalValue 
                                                            = 20
  379 00000330 EA000008        B                mayNegGetPress ;   }
  380 00000334         chkTwoGetPress                       ;
  381 00000334 E3500002        CMP              R0, #2      ;   else if(origina
                                                            lValue == 2)
  382 00000338 1A000001        BNE              chkFourGetPress ;   {
  383 0000033C E3A00015        LDR              R0, =21     ;    originalValue 
                                                            = 21



ARM Macro Assembler    Page 10 


  384 00000340 EA000004        B                mayNegGetPress ;   }
  385 00000344         chkFourGetPress                      ;  
  386 00000344 E3500004        CMP              R0, #4      ;   else if(origina
                                                            lValue == 4)
  387 00000348 1A000001        BNE              chk8GetPress ;   {
  388 0000034C E3A00016        LDR              R0, =22     ;    originalValue 
                                                            = 22
  389 00000350 EA000000        B                mayNegGetPress ;   }  
  390 00000354         chk8GetPress                         ;  else {
  391 00000354 E3A00017        LDR              R0, =23     ;    originalValue 
                                                            = 23
  392 00000358         mayNegGetPress                       ;   }
  393 00000358 E3520000        CMP              R2, #0      ;   if(isLongPress)
                                                            
  394 0000035C 0A000000        BEQ              notNegGetPress ;   {
  395 00000360 E2600000        NEG              R0, R0      ;    originalValue 
                                                            = 2'sComplementOf(o
                                                            riginalValue)
  396 00000364         notNegGetPress                       ;   }
  397 00000364         ;  //COMPENSATE FOR SWITCH BOUNCE
  398 00000364 E1A01000        MOV              R1, R0      ;   resTmp = origin
                                                            alValue
  399 00000368 E59F00E4        LDR              R0, =200000 ;   waitTime
  400 0000036C EB00001D        BL               wait        ;   wait(waitTime)
  401 00000370 E1A00001        MOV              R0, R1      ;   originalValue =
                                                             resTmp
  402 00000374         nonePressed                          ; }
  403 00000374 E8BD803E        LDMFD            sp!, {R1-R5, PC}
  404 00000378         
  405 00000378         ;Takes number in R0
  406 00000378         ;Num in range (-8 <= x <= 7)
  407 00000378         dispNum
  408 00000378 E92D4006        STMFD            sp!, {R1-R2, LR}
  409 0000037C E59F10C0        LDR              R1, =IO1SET ; load set reg
  410 00000380 E3A0280F        LDR              R2, =0x000F0000 ; load mask
  411 00000384 E5812000        STR              R2, [R1]    ; turn off LEDs usi
                                                            ng mask
  412 00000388         
  413 00000388 E59F10B8        LDR              R1, =IO1CLR ; load clear reg
  414 0000038C E2800008        ADD              R0, R0, #8  ; num += arrayOffse
                                                            t
  415 00000390 E59F2090        LDR              R2, =dispArray ; load array add
                                                            ress
  416 00000394 E7922000        LDR              R2, [R2, R0] ; load value to di
                                                            splay from array
  417 00000398 E1A02802        LSL              R2, #16     ; Shift to compensa
                                                            te for location off
                                                            set
  418 0000039C E5812000        STR              R2, [R1]    ; Set bits to turn 
                                                            on LEDs
  419 000003A0 E8BD8006        LDMFD            sp!, {R1-R2, PC}
  420 000003A4         
  421 000003A4         ;Takes a number in R0
  422 000003A4         ;Num in range (-8 <= x <= 7)
  423 000003A4         flashNum
  424 000003A4 E92D401E        STMFD            sp!, {R1-R4, LR}
  425 000003A8 E1A01000        MOV              R1, R0      ; numTmp = num
  426 000003AC E3A03003        LDR              R3, =3      ; number of flashes
                                                             = 3



ARM Macro Assembler    Page 11 


  427 000003B0 E59F40A4        LDR              R4, =1000000 ; waitTime
  428 000003B4         notDoneFlashNum                      ;
  429 000003B4 E3530000        CMP              R3, #0      ; while(number of f
                                                            lashes > 0)
  430 000003B8 0A000009        BEQ              doneAllFlashNum ; {
  431 000003BC E2433001        SUB              R3, R3, #1  ;  number of flashe
                                                            s --
  432 000003C0 E3A00000        LDR              R0, =0      ; load 0 to display
                                                            
  433 000003C4 EBFFFFEB        BL               dispNum     ; show 0
  434 000003C8 E1A00004        MOV              R0, R4      ; load waitTime
  435 000003CC EB000005        BL               wait        ; wait(waitTime)
  436 000003D0 E1A00001        MOV              R0, R1      ; num = numTmp
  437 000003D4 EBFFFFE7        BL               dispNum     ; show(num)
  438 000003D8 E1A00004        MOV              R0, R4      ; load waitTime
  439 000003DC EB000001        BL               wait        ; wait(waitTime)
  440 000003E0 EAFFFFF3        B                notDoneFlashNum ; }
  441 000003E4         doneAllFlashNum
  442 000003E4 E8BD801E        LDMFD            sp!, {R1-R4, PC}
  443 000003E8         
  444 000003E8         
  445 000003E8         
  446 000003E8         ; wait an amount of cycles 
  447 000003E8         ; R0 = cycles
  448 000003E8         wait
  449 000003E8 E92D4000        STMFD            sp!, {LR}
  450 000003EC         loopWait                             ; while(cycles-- > 
                                                            0)
  451 000003EC E2500001        SUBS             R0, R0, #1  ; {
  452 000003F0 1AFFFFFD        BNE              loopWait    ; }
  453 000003F4 E8BD8000        LDMFD            sp!, {PC}
  454 000003F8         
  455 000003F8         
  456 000003F8 FFFFF000 
              00000000 
              E0004000 
              00011FFF 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              E0028008 
              E0028004 
              E002800C 
              00000000 
              E0028018 
              E0028014 
              E002801C 
              E0028010 
              000927C0 
              00030D40 
              00000000 
              000F4240         AREA             InterruptStuff, CODE, READONLY



ARM Macro Assembler    Page 12 


  457 00000000         irqhan
  458 00000000 E24EE004        sub              lr,lr,#4    ;lr adjust
  459 00000004 E59FD084        LDR              SP, =IRQSP  ;load sp
  460 00000008 E59DD000        LDR              SP, [SP]    ;^^
  461 0000000C E28DD008        ADD              SP, #8
  462 00000010 E9AD1FFF        stmfa            sp!,{r0-r12}
  463 00000014 E10F0000        MRS              R0, CPSR    ; save CPSR
  464 00000018 E9AD0001        STMFA            SP!, {R0}   ; save CPSR 
  465 0000001C E24DD040        SUB              SP, SP, #(16 * 4)
  466 00000020         
  467 00000020         ;***********************************************
  468 00000020 E59F006C        LDR              R0, =noOfCycles 
                                                            ; load noOfCycles
  469 00000024 E5901000        LDR              R1, [R0]    ; ^^
  470 00000028 E2811001        ADD              R1, R1, #1  ; noOfCycles++
  471 0000002C E5801000        STR              R1, [R0]    ; store updated num
                                                            ber of cycles
  472 00000030         
  473 00000030         ;this is where we stop the timer from making the interru
                       pt request to the VIC
  474 00000030         ;i.e. we 'acknowledge' the interrupt
  475 00000030 E59F0060        ldr              r0,=T0
  476 00000034 E3A01001        mov              r1,#TimerResetTimer0Interrupt
  477 00000038 E5801000        str              r1,[r0,#IR] ; remove MR0 interr
                                                            upt request from ti
                                                            mer
  478 0000003C         
  479 0000003C         ;here we stop the VIC from making the interrupt request 
                       to the CPU:
  480 0000003C E59F0058        ldr              r0,=VIC
  481 00000040 E3A01000        mov              r1,#0
  482 00000044 E5801030        str              r1,[r0,#VectAddr] ; reset VIC
  483 00000048         ;**********************************************
  484 00000048         
  485 00000048         
  486 00000048         
  487 00000048 E1A0000D        MOV              R0, SP      ; spTMP = IRQSP
  488 0000004C E1A0200E        MOV              R2, LR      ; lrTMP = LR
  489 00000050         
  490 00000050 E321F01F        MSR              CPSR_C, #0x1F ; switch to syste
                                                            m mode
  491 00000054         
  492 00000054 E1A0100D        MOV              R1, SP
  493 00000058         
  494 00000058 E9A00006        STMFA            R0!, {R1,R2} ; save SP
  495 0000005C         
  496 0000005C         
  497 0000005C E280003C        ADD              R0, R0, #(15 * 4) ; sp++ //get 
                                                            to new sp location 
                                                            pointer
  498 00000060 E590D000        LDR              SP, [R0]    ; sp = pointer to n
                                                            ext thread
  499 00000064         
  500 00000064 E59F0024        LDR              R0, =IRQSP  ;
  501 00000068 E580D000        STR              SP, [R0]    ;
  502 0000006C         
  503 0000006C E5901000        LDR              R1, [R0]    ;compensate for poi
                                                            nter alignment
  504 00000070 E2411040        SUB              R1, R1, #(4 * 16) ;^^^



ARM Macro Assembler    Page 13 


  505 00000074 E5801000        STR              R1, [R0]    ;^^^
  506 00000078         
  507 00000078         ;SUB SP, SP, #(2*4)
  508 00000078 E83D0001        LDMFA            sp!, {R0}   ;load thread CPSR
  509 0000007C         
  510 0000007C E128F000        MSR              CPSR_f, R0  ;write thread CPSR
  511 00000080         
  512 00000080 E83D1FFF        LDMFA            SP!, {R0-R12} ;load all the reg
                                                            isters
  513 00000084 E81DA000        LDMFA            SP, {SP, PC}
  514 00000088         
  515 00000088         
  516 00000088         
  517 00000088 E28DD040        ADD              SP, SP, #(16*4)
  518 0000008C         ;LDMFD SP!
  519 0000008C         
  520 0000008C         
  521 0000008C         
  522 0000008C         
  523 0000008C         
  524 0000008C         
  525 0000008C         
  526 0000008C         
  527 0000008C         
  528 0000008C         
  529 0000008C         ;this is the body of the interrupt handler
  530 0000008C         
  531 0000008C         ;here you'd put the unique part of your interrupt handle
                       r
  532 0000008C         ;all the other stuff is "housekeeping" to save registers
                        and acknowledge interrupts
  533 0000008C         
  534 0000008C         
  535 0000008C         
  536 0000008C         
  537 0000008C         
  538 0000008C         
  539 0000008C E87D8003        ldmfa            sp!,{r0-r1,pc}^ ; return from i
                                                            nterrupt, restoring
                                                             pc from lr
  540 00000090         ; and also restoring the CPSR
  541 00000090         
  542 00000090         
  543 00000090         
  544 00000090         
  545 00000090 00000000 
              00000000 
              E0004000 
              FFFFF000 
              00000000         AREA             StoreData, DATA, READWRITE
  546 00000000         
  547 00000000         procAStack
  548 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 14 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 15 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 16 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00            SPACE            512
  549 00000200         
  550 00000200         procBStack
  551 00000200 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 17 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 18 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 19 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00            SPACE            512
  552 00000400         
  553 00000400         IRQStack
  554 00000400 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 20 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 21 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 22 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00            SPACE            512
  555 00000600         
  556 00000600         IRQSP
  557 00000600 00000000        DCD              0x0
  558 00000604         
  559 00000604         
  560 00000604         stackSize
  561 00000604 00000200        DCD              0x200
  562 00000608         
  563 00000608         noOfCycles
  564 00000608 00000000        DCD              0x0
  565 0000060C         
  566 0000060C         
  567 0000060C         dispArray
  568 0000060C 01              DCB              2_0001
  569 0000060D 09              DCB              2_1001
  570 0000060E 05              DCB              2_0101
  571 0000060F 0D              DCB              2_1101
  572 00000610 03              DCB              2_0011
  573 00000611 0B              DCB              2_1011
  574 00000612 07              DCB              2_0111
  575 00000613 0F              DCB              2_1111



ARM Macro Assembler    Page 23 


  576 00000614 00              DCB              2_0000
  577 00000615 08              DCB              2_1000
  578 00000616 04              DCB              2_0100
  579 00000617 0C              DCB              2_1100
  580 00000618 02              DCB              2_0010
  581 00000619 0A              DCB              2_1010
  582 0000061A 06              DCB              2_0110
  583 0000061B 0E              DCB              2_1110
  584 0000061C         
  585 0000061C                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\a
pp.d -o.\app.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Ke
il_v5\ARM\Inc\Philips --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 
1" --predefine="__UVISION_VERSION SETA 516" --list=.\listings\app.lst App.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CalcTime 00000168

Symbol: CalcTime
   Definitions
      At line 213 in file App.s
   Uses
      At line 118 in file App.s
Comment: CalcTime used once
InitialisationAndMain 00000000

Symbol: InitialisationAndMain
   Definitions
      At line 46 in file App.s
   Uses
      None
Comment: InitialisationAndMain unused
LEDTime 000000E8

Symbol: LEDTime
   Definitions
      At line 161 in file App.s
   Uses
      At line 100 in file App.s
Comment: LEDTime used once
adder 00000234

Symbol: adder
   Definitions
      At line 285 in file App.s
   Uses
      At line 276 in file App.s
Comment: adder used once
chk8GetPress 00000354

Symbol: chk8GetPress
   Definitions
      At line 390 in file App.s
   Uses
      At line 387 in file App.s
Comment: chk8GetPress used once
chkFourGetPress 00000344

Symbol: chkFourGetPress
   Definitions
      At line 385 in file App.s
   Uses
      At line 382 in file App.s
Comment: chkFourGetPress used once
chkTwoGetPress 00000334

Symbol: chkTwoGetPress
   Definitions
      At line 380 in file App.s
   Uses
      At line 377 in file App.s
Comment: chkTwoGetPress used once
clearDisp 000001DC

Symbol: clearDisp



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 256 in file App.s
   Uses
      At line 253 in file App.s
Comment: clearDisp used once
decrement 00000210

Symbol: decrement
   Definitions
      At line 274 in file App.s
   Uses
      At line 265 in file App.s
Comment: decrement used once
dispNum 00000378

Symbol: dispNum
   Definitions
      At line 407 in file App.s
   Uses
      At line 259 in file App.s
      At line 309 in file App.s
      At line 329 in file App.s
      At line 433 in file App.s
      At line 437 in file App.s

dispResult 00000274

Symbol: dispResult
   Definitions
      At line 306 in file App.s
   Uses
      At line 303 in file App.s
Comment: dispResult used once
doneAllFlashNum 000003E4

Symbol: doneAllFlashNum
   Definitions
      At line 441 in file App.s
   Uses
      At line 430 in file App.s
Comment: doneAllFlashNum used once
doneThreadSetup 000000E4

Symbol: doneThreadSetup
   Definitions
      At line 155 in file App.s
   Uses
      At line 155 in file App.s
Comment: doneThreadSetup used once
doneWaitGetPress 0000030C

Symbol: doneWaitGetPress
   Definitions
      At line 367 in file App.s
   Uses
      At line 360 in file App.s
      At line 371 in file App.s

finish 000002AC



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols


Symbol: finish
   Definitions
      At line 327 in file App.s
   Uses
      At line 273 in file App.s
      At line 284 in file App.s
      At line 297 in file App.s
      At line 321 in file App.s
      At line 324 in file App.s

flashNum 000003A4

Symbol: flashNum
   Definitions
      At line 423 in file App.s
   Uses
      At line 269 in file App.s
      At line 280 in file App.s

foreverLoop 000001B0

Symbol: foreverLoop
   Definitions
      At line 241 in file App.s
   Uses
      At line 245 in file App.s
      At line 255 in file App.s
      At line 260 in file App.s
      At line 270 in file App.s
      At line 281 in file App.s
      At line 311 in file App.s
      At line 330 in file App.s

foreverLoopLED 00000118

Symbol: foreverLoopLED
   Definitions
      At line 179 in file App.s
   Uses
      At line 183 in file App.s
      At line 197 in file App.s
      At line 202 in file App.s
      At line 207 in file App.s

getPress 000002BC

Symbol: getPress
   Definitions
      At line 335 in file App.s
   Uses
      At line 242 in file App.s
Comment: getPress used once
increment 000001EC

Symbol: increment
   Definitions
      At line 263 in file App.s
   Uses



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 251 in file App.s
Comment: increment used once
longPressAdd 00000298

Symbol: longPressAdd
   Definitions
      At line 319 in file App.s
   Uses
      At line 315 in file App.s
Comment: longPressAdd used once
loopWait 000003EC

Symbol: loopWait
   Definitions
      At line 450 in file App.s
   Uses
      At line 452 in file App.s
Comment: loopWait used once
mathTwo 0000025C

Symbol: mathTwo
   Definitions
      At line 298 in file App.s
   Uses
      At line 292 in file App.s
Comment: mathTwo used once
mayNegGetPress 00000358

Symbol: mayNegGetPress
   Definitions
      At line 392 in file App.s
   Uses
      At line 379 in file App.s
      At line 384 in file App.s
      At line 389 in file App.s

minusOne 0000022C

Symbol: minusOne
   Definitions
      At line 282 in file App.s
   Uses
      At line 278 in file App.s
Comment: minusOne used once
nonePressed 00000374

Symbol: nonePressed
   Definitions
      At line 402 in file App.s
   Uses
      At line 352 in file App.s
Comment: nonePressed used once
notDoneFlashNum 000003B4

Symbol: notDoneFlashNum
   Definitions
      At line 428 in file App.s
   Uses
      At line 440 in file App.s



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

Comment: notDoneFlashNum used once
notNegGetPress 00000364

Symbol: notNegGetPress
   Definitions
      At line 396 in file App.s
   Uses
      At line 394 in file App.s
Comment: notNegGetPress used once
nowBlue 00000150

Symbol: nowBlue
   Definitions
      At line 199 in file App.s
   Uses
      At line 191 in file App.s
Comment: nowBlue used once
nowGreen 00000144

Symbol: nowGreen
   Definitions
      At line 194 in file App.s
   Uses
      At line 189 in file App.s
Comment: nowGreen used once
nowRed 0000015C

Symbol: nowRed
   Definitions
      At line 204 in file App.s
   Uses
      At line 192 in file App.s
Comment: nowRed used once
plusOne 00000208

Symbol: plusOne
   Definitions
      At line 271 in file App.s
   Uses
      At line 267 in file App.s
Comment: plusOne used once
pressedGetPress 000002E0

Symbol: pressedGetPress
   Definitions
      At line 353 in file App.s
   Uses
      At line 350 in file App.s
Comment: pressedGetPress used once
shortPressGetPress 0000031C

Symbol: shortPressGetPress
   Definitions
      At line 372 in file App.s
   Uses
      At line 366 in file App.s
Comment: shortPressGetPress used once
start 00000000




ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

Symbol: start
   Definitions
      At line 50 in file App.s
   Uses
      At line 49 in file App.s
      At line 248 in file App.s

stop 000002B8

Symbol: stop
   Definitions
      At line 332 in file App.s
   Uses
      At line 332 in file App.s
Comment: stop used once
subOne 00000270

Symbol: subOne
   Definitions
      At line 304 in file App.s
   Uses
      At line 301 in file App.s
Comment: subOne used once
subPressed 00000240

Symbol: subPressed
   Definitions
      At line 290 in file App.s
   Uses
      At line 317 in file App.s
Comment: subPressed used once
subber 00000288

Symbol: subber
   Definitions
      At line 313 in file App.s
   Uses
      At line 287 in file App.s
Comment: subber used once
wait 000003E8

Symbol: wait
   Definitions
      At line 448 in file App.s
   Uses
      At line 400 in file App.s
      At line 435 in file App.s
      At line 439 in file App.s

waitTimeGetPress 000002EC

Symbol: waitTimeGetPress
   Definitions
      At line 358 in file App.s
   Uses
      At line 364 in file App.s
Comment: waitTimeGetPress used once
41 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

InterruptStuff 00000000

Symbol: InterruptStuff
   Definitions
      At line 456 in file App.s
   Uses
      None
Comment: InterruptStuff unused
irqhan 00000000

Symbol: irqhan
   Definitions
      At line 457 in file App.s
   Uses
      At line 56 in file App.s
Comment: irqhan used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

IRQSP 00000600

Symbol: IRQSP
   Definitions
      At line 556 in file App.s
   Uses
      At line 152 in file App.s
      At line 459 in file App.s
      At line 500 in file App.s

IRQStack 00000400

Symbol: IRQStack
   Definitions
      At line 553 in file App.s
   Uses
      At line 91 in file App.s
      At line 132 in file App.s
      At line 140 in file App.s

StoreData 00000000

Symbol: StoreData
   Definitions
      At line 545 in file App.s
   Uses
      None
Comment: StoreData unused
dispArray 0000060C

Symbol: dispArray
   Definitions
      At line 567 in file App.s
   Uses
      At line 415 in file App.s
Comment: dispArray used once
noOfCycles 00000608

Symbol: noOfCycles
   Definitions
      At line 563 in file App.s
   Uses
      At line 180 in file App.s
      At line 468 in file App.s

procAStack 00000000

Symbol: procAStack
   Definitions
      At line 547 in file App.s
   Uses
      At line 94 in file App.s
Comment: procAStack used once
procBStack 00000200

Symbol: procBStack
   Definitions
      At line 550 in file App.s
   Uses



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 112 in file App.s
Comment: procBStack used once
stackSize 00000604

Symbol: stackSize
   Definitions
      At line 560 in file App.s
   Uses
      At line 96 in file App.s
      At line 114 in file App.s

8 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

Blue 00040000

Symbol: Blue
   Definitions
      At line 37 in file App.s
   Uses
      At line 200 in file App.s
Comment: Blue used once
Green 00200000

Symbol: Green
   Definitions
      At line 36 in file App.s
   Uses
      At line 173 in file App.s
      At line 190 in file App.s
      At line 195 in file App.s

IO0CLR E002800C

Symbol: IO0CLR
   Definitions
      At line 33 in file App.s
   Uses
      At line 174 in file App.s
Comment: IO0CLR used once
IO0DIR E0028008

Symbol: IO0DIR
   Definitions
      At line 30 in file App.s
   Uses
      At line 163 in file App.s
Comment: IO0DIR used once
IO0PIN E0028000

Symbol: IO0PIN
   Definitions
      At line 31 in file App.s
   Uses
      None
Comment: IO0PIN unused
IO0SET E0028004

Symbol: IO0SET
   Definitions
      At line 32 in file App.s
   Uses
      At line 169 in file App.s
      At line 176 in file App.s

IO1CLR E002801C

Symbol: IO1CLR
   Definitions
      At line 41 in file App.s
   Uses
      At line 231 in file App.s
      At line 413 in file App.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols


IO1DIR E0028018

Symbol: IO1DIR
   Definitions
      At line 39 in file App.s
   Uses
      At line 226 in file App.s
Comment: IO1DIR used once
IO1PIN E0028010

Symbol: IO1PIN
   Definitions
      At line 42 in file App.s
   Uses
      At line 232 in file App.s
      At line 344 in file App.s
      At line 356 in file App.s

IO1SET E0028014

Symbol: IO1SET
   Definitions
      At line 40 in file App.s
   Uses
      At line 229 in file App.s
      At line 409 in file App.s

IR 00000000

Symbol: IR
   Definitions
      At line 8 in file App.s
   Uses
      At line 75 in file App.s
      At line 477 in file App.s

IRQslot_en 00000005

Symbol: IRQslot_en
   Definitions
      At line 28 in file App.s
   Uses
      At line 59 in file App.s
Comment: IRQslot_en used once
IntEnable 00000010

Symbol: IntEnable
   Definitions
      At line 21 in file App.s
   Uses
      At line 63 in file App.s
Comment: IntEnable used once
MCR 00000014

Symbol: MCR
   Definitions
      At line 10 in file App.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

      At line 81 in file App.s
Comment: MCR used once
MR0 00000018

Symbol: MR0
   Definitions
      At line 11 in file App.s
   Uses
      At line 78 in file App.s
Comment: MR0 used once
Red 00020000

Symbol: Red
   Definitions
      At line 35 in file App.s
   Uses
      At line 188 in file App.s
      At line 205 in file App.s

StdStackOffset 00000040

Symbol: StdStackOffset
   Definitions
      At line 44 in file App.s
   Uses
      At line 107 in file App.s
      At line 125 in file App.s
      At line 133 in file App.s
      At line 139 in file App.s
      At line 143 in file App.s
      At line 149 in file App.s

T0 E0004000

Symbol: T0
   Definitions
      At line 5 in file App.s
   Uses
      At line 69 in file App.s
      At line 475 in file App.s

T1 E0008000

Symbol: T1
   Definitions
      At line 6 in file App.s
   Uses
      None
Comment: T1 unused
TCR 00000004

Symbol: TCR
   Definitions
      At line 9 in file App.s
   Uses
      At line 72 in file App.s
      At line 84 in file App.s

Timer0ChannelNumber 00000004



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols


Symbol: Timer0ChannelNumber
   Definitions
      At line 26 in file App.s
   Uses
      At line 27 in file App.s
      At line 59 in file App.s

Timer0Mask 00000010

Symbol: Timer0Mask
   Definitions
      At line 27 in file App.s
   Uses
      At line 62 in file App.s
Comment: Timer0Mask used once
TimerCommandReset 00000002

Symbol: TimerCommandReset
   Definitions
      At line 13 in file App.s
   Uses
      At line 71 in file App.s
Comment: TimerCommandReset used once
TimerCommandRun 00000001

Symbol: TimerCommandRun
   Definitions
      At line 14 in file App.s
   Uses
      At line 83 in file App.s
Comment: TimerCommandRun used once
TimerModeResetAndInterrupt 00000003

Symbol: TimerModeResetAndInterrupt
   Definitions
      At line 15 in file App.s
   Uses
      At line 80 in file App.s
Comment: TimerModeResetAndInterrupt used once
TimerResetAllInterrupts 000000FF

Symbol: TimerResetAllInterrupts
   Definitions
      At line 17 in file App.s
   Uses
      At line 74 in file App.s
Comment: TimerResetAllInterrupts used once
TimerResetTimer0Interrupt 00000001

Symbol: TimerResetTimer0Interrupt
   Definitions
      At line 16 in file App.s
   Uses
      At line 476 in file App.s
Comment: TimerResetTimer0Interrupt used once
VIC FFFFF000

Symbol: VIC



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 20 in file App.s
   Uses
      At line 54 in file App.s
      At line 480 in file App.s

VectAddr 00000030

Symbol: VectAddr
   Definitions
      At line 22 in file App.s
   Uses
      At line 66 in file App.s
      At line 482 in file App.s

VectAddr0 00000100

Symbol: VectAddr0
   Definitions
      At line 23 in file App.s
   Uses
      At line 57 in file App.s
Comment: VectAddr0 used once
VectCtrl0 00000200

Symbol: VectCtrl0
   Definitions
      At line 24 in file App.s
   Uses
      At line 60 in file App.s
Comment: VectCtrl0 used once
31 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 47 in file App.s
   Uses
      None
Comment: main unused
1 symbol
420 symbols in table
